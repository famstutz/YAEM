#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrbook
\use_default_options true
\maintain_unincluded_children false
\language german-ch
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Yet Another Encrypted Messenger
\end_layout

\begin_layout Author
Florian Amstutz <
\begin_inset CommandInset href
LatexCommand href
target "florian@amstutz.nu"
type "mailto:"

\end_inset

>
\end_layout

\begin_layout Publishers

\size large
Semesterarbeit an der Zürcher Hochschule für Angewandte Wissenschaften
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Einführung
\end_layout

\begin_layout Standard
Als einführendes Kapitel dieses Dokuments wird die Semesterarbeit als Projekt
 kurz vorgestellt und es werden die Rahmenbedingungen der Arbeit zusammengefasst
 niedergeschrieben.
 Weiter werden verschiedene Softwareentwicklungsprozesse vorgestellt sowie
 die für diese Semesterarbeit verwendete Methode erklärt.
 Am Ende dieses Kapitels wird unter Benutzung der vorgestellten Softwareentwickl
ungsmethode eine Projektplanung erstellt und die wichtigsten Meilensteine
 definiert.
\end_layout

\begin_layout Section
Management Summary
\end_layout

\begin_layout Standard
Mit dem zunehmenden Aufkommen von Attacken und gezieltem Abhorchen von Echtzeitk
ommunikation via E-Mail oder Instant Messaging steigt der Bedarf an eine
 sichere und einfache Übertragungsart von Nachrichten und Daten.
 
\end_layout

\begin_layout Standard
Als Nutzer eines Kommunikationskanals über das öffentliche Internet will
 ich die Möglichkeit haben meine privaten Daten verschlüsselt und sicher
 an einen oder mehrere Empfänger übertragen zu können.
 Ich will dabei eine einfach zu bedienende Applikation zur Verfügung haben
 um meine geheimen Daten versenden zu können und so potentiellen Mithörern
 keine Klartextinformationen zur Verfügung zu stellen.
 
\end_layout

\begin_layout Standard
Diese Applikation soll als Prototyp im Rahmen der Semesterarbeit im dritten
 Studienjahr an der ZHAW entwickelt werden.
 Dabei wird der Fokus der Arbeit auf der methodischen Vorgehensweise der
 Softwareentwicklung gelegt und weniger auf der Implementierung der kryptografis
chen Algorithmen.
\end_layout

\begin_layout Section
Über die Semesterarbeit
\end_layout

\begin_layout Standard
Gemäss Reglement der ZHAW (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "Stern2010"

\end_inset

) dient die Semesterarbeit zur Vorbereitung auf die Bachelorarbeit.
 Sie besteht aus einem konzeptionellen Teil und einem Umsetzungsteil, wobei
 der Schwerpunkt auf der Umsetzung der Arbeit liegen soll.
\end_layout

\begin_layout Standard
Der Aufwand für die Fertigstellung der Semestarbeit beträgt mindestens 120
 Stunden und schliesst mit einer Präsentation vor dem Betreuer und einer
 Vertretung der Leitung des Studengangs Informatik ab.
\end_layout

\begin_layout Section
Softwareentwicklungsprozess
\end_layout

\begin_layout Standard
Software lässt sich nach einer Vielzahl von Prozessen und Modellen entwickeln.
 Von iterativen Vorgehen wie Scrum über komplexe und vergleichsweise starre
 Modelle wie RUP
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "RUP"
description "Der Rational Unified Process ist ein kommerzielles Vorgehensmodell zur Softwareentwicklung von IBM. "

\end_inset

 bis hin zu klassischen, linearen Vorgehen wie dem Wasserfallmodell
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Wasserfallmodell"
description "Das Wasserfallmodell ist ein lineares (nicht iteratives) Vorgehensmodell, das in Phasen organisiert wird. Dabei gehen die Phasenergebnisse wie bei einem Wasserfall immer als bindende Vorgaben für die nächsttiefere Phase ein. Im Wasserfallmodell hat jede Phase vordefinierte Start- und Endpunkte mit eindeutig definierten Ergebnissen. "

\end_inset

 oder dem V-Modell
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "V-Modell"
description "Das V-Modell ist ein Vorgehensmodell in der Softwareentwicklung, bei dem der Softwareentwicklungsprozess in Phasen organisiert wird. Neben diesen Entwicklungsphasen definiert das V-Modell auch das Vorgehen zur Qualitätssicherung (Testen) phasenweise."

\end_inset

.
 Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

 ist die Auswahl des Entwicklungsprozesses eine der kritischsten Entscheidungen,
 die man bei einem Softwareprojekt treffen muss.
 Häufig besitzen Unternehmungen bereits etablierte, auf sie zugeschnittene
 Entwicklungsmodelle, die mehr oder weniger gut zur Organisation der Unternehmun
g und dem jeweiligen Projekt passen.
 Ein ungünstig gewählter oder nicht vollständig eingeführter und gelebter
 Entwicklungsprozess ist nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

 einer der Hauptgründe wieso Softwareprojekte mit Qualitätsmängeln, Budgetübersc
hreitungen oder zeitlichen Verzögerungen zu kämpfen haben.
\end_layout

\begin_layout Standard
Für dieses Projekt wurde das Wasserfallmodell als Entwicklungsprozess ausgewählt.
 Das Wasserfallmodell teilt die Softwareentwicklung meist in fünf verschiedene
 Phasen auf (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wasserfallprozess-nach"

\end_inset

).
 Dabei kann jeweils erst mit der nächsten Phase begonnen werde wenn die
 Lieferegebnisse und die Ergebnisdokumentation der vorhergehenden Phase
 fertiggestellt und abgenommen worden sind.
 Das Wasserfallmodell wurde ausgewählt, da dieses Projekt gut linear abgearbeite
t werden kann und da der Betreuer als einziger externer Stakeholder
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Stakeholder"
description "Als Stakeholder (engl.) wird eine Person oder Gruppe bezeichnet, die ein berechtigtes Interesse am Verlauf oder Ergebnis eines Prozesses oder Projektes hat."

\end_inset

 des Projekts zu festdefinierten Phasen Einfluss auf das Projekt ausüben
 kann und danach keine andere Möglichkeit besitzt, den Projektverlauf zu
 beeinflussen.
 Die grössten Nachteile des Wasserfallmodells sind nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Elmer2005"

\end_inset

 Abgrenzugsprobleme zwischen den einzelnen Phasen sowie die Schwierigkeit
 des Abschlusses einzelner Phasen da diese nur mit viel (zusätzlichem) Aufwand
 isoliert von anderen Phasen abgeschlossen werden können.
 Dadurch dass der Betreuer nur in der Anforderungs- und Konzeptphase Einfluss
 auf das Projekt nehmen kann und der Student alleinig den Abschluss der
 Phasen steuert und verifiziert sowie den Ablauf der Phasen innerhalb des
 Projekts steuert, können diese Nachteile umgangen werden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/sw-process.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Wasserfallprozess nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Hung2007"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Wasserfallprozess-nach"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zu Beginn des Wasserfallmodells steht das Sammeln und Dokumentieren der
 Anforderungen (Requirements) im Vordergrund.
 Wenn die Anforderungen umfänglich und in hohem Detaillierungsgrad niedergeschri
eben sind, werden diese vom Auftraggeber abgenommen und das Projekt geht
 in die Phase Design über.
 Die zu entwickelnde Software wird auf verschiedenen Ebenen von Softwarearchitek
ten designed und eine Blaupause wird erstellt, nach welcher sich die Softwareent
wickler in der Implementationsphase zu halten haben.
 Das Design sollte einen Plan beinhalten, welcher die Implementierung der
 Anforderungen aufzeigt.
 
\end_layout

\begin_layout Standard
Wenn das Design fertiggestellt worden ist, wird dieses von den Entwicklern
 in Programmcode umgesetzt.
 Gegen Ende der Implementationsphase werden die Softwarekomponenten verschiedene
r Teams integriert und als Gesamtsystem zum Einsatz gebracht.
 Nachdem die Implementierungs- und Integrationsphase abgeschlossen sind,
 wird das Softwareprodukt getestet und allfällige Fehler aus früheren Phasen
 werden zu diesem Zeitpunkt behoben.
 Danach wird das Softwareprodukt installiert und später in der Wartungsphase
 (Maintenance) um weitere Funktionalitäten erweitert beziehungsweise werden
 neu entdeckte Bugs
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Bug"
description "Ein Programm- oder Softwarefehler wird als Bug bezeichnet und beschreibt im Allgemeinen ein fehlerhaftes Verhalten von Computerprogrammen."

\end_inset

 behoben.
\end_layout

\begin_layout Standard
Die Struktur dieses Projekts und der dazugehörigen Dokumentation hält sich
 auch an den Wasserfallprozess nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Hung2007"

\end_inset

 (siehe Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Zuweisungstablle-der-Phasen"

\end_inset

).
 Die Phase Maintenance wird dabei ausgelassen, da sich die innerhalb des
 Projekts entwickelte Applikation nach Abschluss der Verifizierungsphase
 noch im Protoypenstadium befinden wird und nicht dem Reifegrad einer Applikatio
n besitzt, die in die Wartung übergehen kann.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phase
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapitelüberschrift
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Siehe Seite
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requirements
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:Anforderungen"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Anforderungen"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Design
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:Konzept-und-Architektur"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Konzept-und-Architektur"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implementation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:Implementierung"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Implementierung"

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Verification
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:Test"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand pageref
reference "chap:Test"

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Zuweisungstabelle der Phasen zu Kapiteln in diesem Dokument
\begin_inset CommandInset label
LatexCommand label
name "tab:Zuweisungstablle-der-Phasen"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Projektplanung
\end_layout

\begin_layout Standard
Nach Reglement der ZHAW (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "Stern2010"

\end_inset

) muss die Semesterarbeit sechs Monate nach Freigabe beendet sein.
 Um die Planbarkeit der Semesterarbeit zu erhöhen wurde das Projekt bei
 Projektstart in einzelne Phasen unterteilt, welche auf die vorgängig bekannten
 Termine als Meilensteine enden.
\end_layout

\begin_layout Standard
Ziel dieser Phasenplanung ist es, möglichst frühzeitig im Verlauf der Seminararb
eit Teile der erwarteten Resultate sowie der Dokumentation fertiggestellt
 zu haben, so dass das Risiko von Qualitätseinbussen der Abgaberesultate
 zu minimieren.
 Ausserdem sinkt das Wahrscheinlichkeit, dass nicht alle erwarteten Resultate
 der Arbeit geliefert werden können, da die Lieferergebnisse bei jeweiligem
 Phasenende schon in abgabefertiger Qualität vorliegen.
\end_layout

\begin_layout Subsection
Phasenplanung
\begin_inset CommandInset label
LatexCommand label
name "sub:Phasenplanung"

\end_inset


\end_layout

\begin_layout Standard
Nach dem Wasserfallmodell wird das Projekt in einzelne Phasen eingeteilt,
 die zu einem bestimmten Zeitpunkt mit vordefinierten Endergebnissenen enden.
 Bei Erreichen des Endzeitpunkts und bei Lieferung aller Endergebnisse geht
 das Projekt in die nächste Phase über.
 Die Phasen dieser Semesterarbeit wurden so modelliert, dass ihr Endzeitpunkt
 möglichst mit dem Erreichen eines Meilensteins zusammenfällt (siehe Tabelle
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Phasenplan"

\end_inset

).
 Das heisst, dass bei Erreichen des Meilensteins die vorhergehende Phase
 zwingend abgeschlossen sein werden muss.
\end_layout

\begin_layout Standard
Vor dem eigentlichen Projektstart werden geeigeneten Themen für die Semesterarbe
it evaluiert, ein Betreuer gesucht sowie ein Projektantrag in EBS erfasst.
 Diese Phase endet mit dem Kick-Off-Meeting zwischen Betreuer und Student
 sowie der formalen Freigabe der Semesterarbeit durch die Studiengangsleitung.
 Das Erheben und Dokumentieren der Anforderungen ist die erste Phase des
 eigentlichen Projekts und mündet in der Konzepterarbeitung auf Basis der
 Anforderungen.
 Ist das Konzept vollständig abgeschlossen, findet das Design-Review statt,
 bei welchem der Betreuer das Konzept begutachtet und allfällige Anpassungen
 darn vorschlägt.
 Nach Fertigstellung des Konzepts folgt die Implementierungsphase und Testphase,
 nach denen die Arbeit abgegeben wird.
 In der letzten Phase des Projekts wird die Präsentation erarbeitet, die
 an der Schlusspräsentation (Meilenstein M5) vorgetragen wird.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phase
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ende
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endet in Meilenstein
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Themenevaluation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.10.2011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
04.11.2011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M1, M2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erfassen der Anforderungen
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
04.11.2011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01.12.2011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erarbeiten des Konzepts
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01.12.2011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.04.2012
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implementierungs des Konzepts
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.04.2012
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01.05.2012
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überprüfen und Test des Konzepts
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
01.05.2012
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23.05.2012
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erarbeiten der Präsentation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23.05.2012
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
06.06.2012
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Phasenplan
\begin_inset CommandInset label
LatexCommand label
name "tab:Phasenplan"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Meilensteine
\end_layout

\begin_layout Standard
Ein Meilenstein ist ein Ereignis von besonderer Bedeutung und stellt ein
 (Zwischen-) Ziel innerhalb eines Projekts dar.
 Meilensteine werden typischerweise von Personen oder Organisationen ausserhalb
 des Projekts vorgegeben und passen mit den im vorhergehenden Kapitel definierte
n Phasenenden überein.
\end_layout

\begin_layout Standard
Die Meilensteine des Projekts sind in der Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Meilensteine"

\end_inset

 ersichtlich.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezeichner
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Meilenstein
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Datum
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kick-Off 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
04.11.2011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Freigabe der Arbeit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
06.11.2011
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Design-Review
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13.04.2012
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abgabe der Arbeit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23.05.2012
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
M5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Schlusspräsentation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
06.06.2012
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Meilensteine
\begin_inset CommandInset label
LatexCommand label
name "tab:Meilensteine"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Anforderungen
\begin_inset CommandInset label
LatexCommand label
name "chap:Anforderungen"

\end_inset


\end_layout

\begin_layout Standard
In der Phasenplanung (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Phasenplanung"

\end_inset

) wurde festgelegt, dass in der ersten Projektphase des Projekts die Anforderung
en erhoben werden.
 Dazu wird zu Beginn dieses Kapitels der Begriff Anforderung definiert und
 es wird auf verschiedene Arten von Anforderungen näher eingegangen.
 Anschliessend wird der Systemkontext beschrieben und eingegrenzt sowie
 die konkreten Anforderungen an YAEM als Use-Cases
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Use-Case"
description "Ein Use Case (deutsch Anwendungsfall) bündelt alle möglichen Szenarien, die eintreten können, wenn ein Akteur versucht, mit Hilfe des betrachteten Systems ein bestimmtes fachliches Ziel zu erreichen. Er beschreibt, was inhaltlich beim Versuch der Zielerreichung passieren kann, und abstrahiert von konkreten technischen Lösungen. Das Ergebnis des Anwendungsfalls kann ein Erfolg oder Fehlschlag/Abbruch sein."

\end_inset

 modelliert und spezifiziert.
 Der Abschluss dieses Kapitels wie auch der Anforderungsphase selbst bildet
 das Entwerfen der für den Benutzer sichtbaren Dialogfenster.
\end_layout

\begin_layout Section
Was sind Anforderungen?
\end_layout

\begin_layout Standard
Die erste Phase des Wasserfallmodells beschäftigt sich mit den Anforderungen
 an das zu entwickelnde Softwareprodukt.
 Damit das Entwicklungsprodukt zum Erfolg geführt werden kann, muss zunächst
 bekannt sein, was die Anforderungen an das System sind und diese müssen
 geeignet dokumentiert sein.
 Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "IEEE610.121990"

\end_inset

 wird eine Anforderung wie folgt definiert:
\end_layout

\begin_layout Description
Anforderung Eine Anforderung ist:
\end_layout

\begin_deeper
\begin_layout Enumerate
Eine Bedingung oder Fähigkeit, die von einem Benutzer (Person oder System)
 zur Lösung eines Problems zur Erreichung eines Ziels benötigt wird.
\end_layout

\begin_layout Enumerate
Eine Bedingung oder Fähigkeit, die ein System oder Teilsystem erfüllen oder
 besitzen muss, um einen Vertrag, eine Norm, eine Spezifikation oder andere,
 formell vorgegebene Dokumente zu erfüllen.
\end_layout

\begin_layout Enumerate
Eine dokumentierte Repräsentation einer Bedingung oder Eigenschaft gemäss
 1.
 oder 2.
\end_layout

\end_deeper
\begin_layout Standard
Die Anforderungen an das im Rahmen dieser Semesterarbeits zu entwickelnde
 System werden in Use-Case-Diagrammen modellhaft dargestellt und als Use-Case-Sp
ezifikationen ausformuliert.
 Auf eine natürlichsprachige Dokumentation der Anforderungen wird verzichtet,
 da die modellierten Anforderungen innerhalb der Use-Case-Diagrammen verständlic
h genug sind und zu den Use-Case-Diagrammen noch detaillierte Use-Case-Spezifika
tionen vorhanden sind.
 
\end_layout

\begin_layout Subsection
Arten von Anforderungen
\begin_inset CommandInset label
LatexCommand label
name "sub:Arten-von-Anforderungen"

\end_inset


\end_layout

\begin_layout Standard
Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Pohl2011"

\end_inset

 unterscheidet man im Allgemeinen zwischen drei Arten von Anforderungen:
\end_layout

\begin_layout Itemize
Funktionale Anforderungen legen die Funktionalität fest, die das geplante
 System zur Verfügung stellen soll.
 Sie werden typischerweise in Funktions-, Verhaltens- und Strukturanforderungen
 unterteilt.
\end_layout

\begin_layout Itemize
Qualitätsanforderungen legen gewünschte Qualitäten des zu entwickelnden
 Systems fest und beeinflussen häufig, in grösserem Umfang als die funktionalen
 Anforderungen, die Gestalt der Systemarchitektur.
 Typischerweise beziehen sich Qualitätsanforderungen auf die Performance,
 die Verfügbarkeit, die Zuverlässigkeit, die Skalierbarkeit oder die Portabilitä
t des betrachteten Systems.
 Anforderungen dieses Typs werden häufig auch der Klasse 
\begin_inset Quotes eld
\end_inset

nicht funktionaler Anforderungen
\begin_inset Quotes erd
\end_inset

 zugeordnet.
\end_layout

\begin_layout Itemize
Randbedingungen
\begin_inset Foot
status open

\begin_layout Plain Layout
auch Rahmenbedingungen genannt
\end_layout

\end_inset

 können von den Projektbeteiligten nicht beeinflusst werden.
 Randbedingungen können sich sowohl auf das betrachtete System beziehen
 (z.B.
 
\begin_inset Quotes eld
\end_inset

Das System soll über Webservices mit Aussensysteme kommunizieren
\begin_inset Quotes erd
\end_inset

) als auch auf den Entwicklungsprozess des Systems (z.B.
 
\begin_inset Quotes eld
\end_inset

Das System soll bis spätestens Mitte 2013 am Markt verfügbar sein
\begin_inset Quotes erd
\end_inset

).
 Randbedingungen werden, im Gegensatz zu funktionalen Anforderungen und
 Qualitätsanforderungen, nicht umgesetzt, sondern schränken die Umsetzungsmöglic
hkeiten, das heisst den Lösungsraum im Entwicklungsprozess ein.
\end_layout

\begin_layout Standard
In diesem Dokument werden der Einfachheit halber nur funktionale Anforderungen
 beschrieben.
 Qualitätsanforderungen betreffend der Leistungsfähigkeit oder Wartbarkeit
 des Systems werden nicht erhoben, da diese für den Prototypen nur eingeschränkt
 relevant sind und innerhalb dieses Projekts keinen Wert gelegt werden soll.
 Rahmenbedingungen werden nicht implizit festgehalten sondern ergeben sich
 einerseits aus 
\begin_inset CommandInset citation
LatexCommand cite
key "Stern2010"

\end_inset

 sowohl der technischen Umgebung des Systems.
 Technische Rahmenbedingungen die das Projekt beeinflussen werden im Konzept
 beziehungsweise in der Implementierung berücksichtigt und entsprechend
 hervorgehoben.
\end_layout

\begin_layout Section
Systemkontext
\end_layout

\begin_layout Standard
Als erster Schritt in der Erhebung und Dokumentierung der Anforderung wird
 der Systemkontext ermittelt.
 Es wird eine Sollperspektive eingenommen, das heisst, es wird eine Annahme
 getroffen, wie sich das geplante System in die Realität integriert.
 Hierdurch wird der Realitätsausschnitt identifiziert, der das System und
 damit potenziell auch dessen Anforderungen beeinflusst.
 Um die Anforderungen an das geplante System korrekt und vollständig spezifizier
en zu können, ist es notwendig, die Beziehung zwischen den einzelnen materiellen
 und immateriellen Aspekten im Systemkontext und dem geplanten System exakt
 zu definieren.
 Der für die Anforderungen des Systems relevante Ausschnitt der Realität
 wird als Systemkontext bezeichnet (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Pohl2011"

\end_inset

).
\end_layout

\begin_layout Standard
Der Ursprung der Anforderungen des Systems liegt im Systemkontext des geplanten
 Systems.
 Aus diesem Grund wird der Systemkontext vor Erhebung und Dokumentierung
 der Anforderungen festgelegt.
 Der Systemkontext des Systems YAEM ist in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Systemkontext"

\end_inset

 als Modell dargestellt.
 Die Benutzer als Stakeholder an das System senden und empfangen Nachrichten
 und befinden sich innerhalb des Systemkontexts, da sie direkt mit dem System
 interagieren.
 Die Verschlüsselungsalgorithmen sind in der Fachliteratur klar geregelt
 und normiert und geben aus diesem Grund die konkreten Implementierungsvorschrif
ten ihrerselbst an das System vor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Systemkontext.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Systemkontext
\begin_inset CommandInset label
LatexCommand label
name "fig:Systemkontext"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Use-Case-Spezifikationen
\begin_inset CommandInset label
LatexCommand label
name "sec:Use-Case-Spezifikationen"

\end_inset


\end_layout

\begin_layout Standard
Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Pohl2011"

\end_inset

 zeigen Use-Case-Diagamme die aus einer externen Nutzungssicht wesentlichen
 Funktionalitäten des betrachteten Systems sowie spezifische Beziehungen
 der einzelnen Funktionalitäten untereinander beziehungsweise zu Aspekten
 in der Umgebung des Systems.
 Abgesehen vom Namen des Use-Cases und dessen Beziehungen dokumentieren
 Use-Case-Diagramme keinerlei weitere Informationen über die einzelnen Use-Cases
, wie z.B.
 die Systematik der Interaktion eines Use-Case mit Akteuren in der Umgebung.
 Diese Informationen werden unter Verwendung einer geeigneten Schablone
 zusätzlich zum Use-Case-Diagramm textuell als Use-Case-Spezifikation festgehalt
en.
\end_layout

\begin_layout Standard
Alle funktionalen Anforderungen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Arten-von-Anforderungen"

\end_inset

) werden als Use-Cases modelliert und spezifiziert
\begin_inset Foot
status open

\begin_layout Plain Layout
Die verwendete Schablone stammt aus 
\begin_inset CommandInset citation
LatexCommand cite
key "Pohl2011"

\end_inset

 und dient zur zweckmässigen Strukturierung von Typen von Informationen,
 die einen Use-Case betreffen.
 Die vorgeschlagenen Abschnitte der Schablone Autor, Quelle, Verantwortlicher
 und Qualität werden ausgelassen, da sie im Rahmen dieses Projekts keinen
 zusätzlichen Nutzen bringen.
\end_layout

\end_inset

.
 Als Quellen der Anforderungen dienen der Betreuer, die Reglemente der ZHAW
 betreffend der Semesterarbeit sowie der Student in der Rolle des Benutzers
 des Systems.
 Zusätzlich zu den Use-Cases und den dazugehörigen Use-Case-Spezifikationen
 wird vorgängig in Prosatext der Anwendungsfall beschrieben.
 Aus Gründen der Übersichtlichkeit und der limitierten Gesamtfunktionaliät
 des Systems stellen diese Use-Cases die primären Anforderungen an das zu
 entwickelnde Softwaresystem dar.
 
\end_layout

\begin_layout Standard
Jedes Use-Case wird im Rahmen der Verifizerungsphase (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Test"

\end_inset

) als Akzeptanztest einzeln getestet.
\end_layout

\begin_layout Subsection
Gespräch beitreten
\end_layout

\begin_layout Standard
Ein Benutzer möchte verschlüsselte Nachrichten an andere Gesprächsteilnehmer
 versenden und startet dazu die Applikation.
 Er wählt einen Benutzernamen, stellt eine Verbindung zum Server her und
 nimmt am Gespräch teil.
 Er kann nun anderen Teilnehmern des Gesprächs Nachrichten versenden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/UC1-GespraechBeitreten.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case Gepräch beitreten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschnitt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inhalt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezeichner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gespräch beitreten
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Priorität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wichtigkeit für Systemerfolg: hoch
\begin_inset Newline newline
\end_inset

Technologisches Risiko: niedrig
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kritikalität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hoch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer tritt einem Gespräch bei.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer möchte einem Gespräch beitreten.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Akteure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Benutzer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vorbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer ist nicht schon einem Gespräch beigetreten.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer kann Nachrichten versenden und Nachrichten anderer Gesprächsteilneh
mer empfangen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ergebnis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ein gültiges Session-Ticket wird erstellt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hauptszenario
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Der Benutzer wählt einen Benutzernamen.
\end_layout

\begin_layout Plain Layout
2.
 Der Benutzer stellt eine Verbindung zum Server her.
\end_layout

\begin_layout Plain Layout
3.
 Der Server erstellt ein Session-Ticket für den Benutzer und gibt ihm dieses
 zurück.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternativszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2a.
 Der gewählte Benutzername ist bereits im Gespräch vorhanden.
\end_layout

\begin_layout Plain Layout
2a1.
 Der Benutzer wird aufgefordert einen anderen Benutzernamen auszuwählen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ausnahmeszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis: Der Benutzer kann keine Verbindung zum Server herstellen.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case-Spezifikation Gespräch beitreten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Gespräch verlassen
\end_layout

\begin_layout Standard
Der Benutzer ist einem Gespräch beigetreten und möchte dieses verlassen.
 Er schliesst die Applikation und meldet sich dabei am Server vom Gespräch
 ab.
 Andere Teilnehmer des Gesprächs können ihm nun keine Nachrichten mehr senden.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/UC2-GespraechVerlassen.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case Gespräch verlassen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschnitt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inhalt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezeichner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gespräch verlassen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Priorität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wichtigkeit für Systemerfolg: hoch
\begin_inset Newline newline
\end_inset

Technologisches Risiko: niedrig
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kritikalität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hoch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer verlässt das Gespräch.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer möchte das Gespräch verlassen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Akteure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Benutzer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vorbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer ist einem Gespräch beigetreten.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer kann erneut einem Gespräch beitreten.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ergebnis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Das Session-Ticket des Benutzers ist ungültig.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hauptszenario
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Der Benutzer verlässt das Gespräch.
\end_layout

\begin_layout Plain Layout
2.
 Der Server erklärt das Session-Ticket des Benutzers für ungültig.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternativszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ausnahmeszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keine
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case-Spezifikation Gespräch verlassen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Nachricht senden
\end_layout

\begin_layout Standard
Dies ist der wichtigste und meistgenutzte Anwendungsfall des Systems.
 Der Benutzer (hier in der Rolle des Senders) möchte einem oder mehreren
 Teilnehmern des Gesprächs (Empfänger) eine Nachricht senden.
 Er kann dabei wählen, ob er diese verschlüsselt oder unverschlüsselt versenden
 möchte.
 Sendet der Benutzer die Nachricht verschlüsselt, so werden zuerst der Initialis
ierungsvektor festgelegt sowie der Schlüssel gewählt.
 Danach wird die Nachricht an den oder die Empfänger übermittelt und startet
 den Anwendungsfall Nachricht empfangen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Nachricht-empfangen"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/UC3-NachrichtSenden.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case Nachricht senden
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschnitt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inhalt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezeichner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht senden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Priorität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wichtigkeit für Systemerfolg: hoch
\begin_inset Newline newline
\end_inset

Technologisches Risiko: mittel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kritikalität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hoch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer versendet eine Nachricht.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer möchte eine Nachricht senden.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Akteure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Benutzer (als Empfänger und Sender)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vorbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer ist im Gespräch beigetreten und besitzt ein gültiges Session-Ticket.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer kann erneut eine Nachricht versenden und Nachrichten anderer
 Gesprächsteilnehmer empfangen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ergebnis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Empfänger haben die versendete Nachricht empfangen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hauptszenario
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Der Benutzer erfasst die zu versendende Nachricht.
\end_layout

\begin_layout Plain Layout
2.
 Der Benutzer wählt die Implementierung eines Kryptosystems aus.
\end_layout

\begin_layout Plain Layout
3.
 Der Benutzer generiert einen Initalisierungsvektor
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Initialisierungsvektor"
description "Ein Initialisierungsvektor (kurz IV) bezeichnet in der Kryptografie ein Block von Zufallszahlen."

\end_inset

.
\end_layout

\begin_layout Plain Layout
4.
 Der Initialisierungsvektor wird an alle Empfänger gesendet.
\end_layout

\begin_layout Plain Layout
5.
 Der Benutzer wählt einen Schlüssel
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Schlüssel"
description "Als Schlüssel wird in der Kryptologie allgemein eine Information bezeichnet, die einen kryptographischen Algorithmus parametrisiert."

\end_inset

.
\end_layout

\begin_layout Plain Layout
6.
 Der Benutzer verschickt die (verschlüsselte) Nachricht.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternativszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2a.
 Der Benutzer wählt keinen Kryptoalgorithmus aus.
\end_layout

\begin_layout Plain Layout
2a1.
 Der Benutzer versendet die Nachricht unverschlüselt.
\end_layout

\begin_layout Plain Layout
3a.
 Der Benutzer hat bereits einen Intialisierungsvektor generiert oder einen
 Initalisierungsvektor von einem anderen Teilnehmer des Gesprächs erhalten
 und generiert keinen neuen Initialisierungsvektor.
\end_layout

\begin_layout Plain Layout
4a.
 Der Benutzer hat bereits einen Schlüssel erstellt oder einen Schlüssel
 von einem anderen Teilnehmer des Gesprächs erhalten und wählt keinen neuen
 Schlüssel.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ausnahmeszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis: Der Benutzer kann keine Verbindung zum Server herstellen.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case-Spezifikation Nachricht senden
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Nachricht empfangen
\begin_inset CommandInset label
LatexCommand label
name "sub:Nachricht-empfangen"

\end_inset


\end_layout

\begin_layout Standard
Dieser Anwendungsfall wird nicht vom Benutzer ausgelöst, sondern vom System.
 Sobald eine Nachricht, die an den Benutzer gerichtet ist, eintrifft, wird
 der Anwendungsfall gestartet.
 Ist die Nachricht verschlüsselt, versucht das System mit vorhandenem Initialisi
erungsvektor und Schlüssel die Nachricht zu entschlüssel und dem Benutzer
 darzustellen.
 Ist die Nachricht unverschlüsselt, so wird diese dem Benutzer direkt angezeigt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/UC4-NachrichtEmpfangen.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case Nachricht empfangen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="14" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Abschnitt
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Inhalt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezeichner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht empfangen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Priorität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wichtigkeit für Systemerfolg: hoch
\begin_inset Newline newline
\end_inset

Technologisches Risiko: mittel
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kritikalität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hoch
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beschreibung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer empfängt eine Nachricht.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Auslösendes Ereignis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ein anderer Teilnehmer des Gesprächs versendet eine Nachricht, die an den
 Benutzer gerichtet ist.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Akteure
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Benutzer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vorbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer ist dem Gespräch beigetreten und besitzt ein gültiges Session-Ticke
t.
 Ein Teilnehmer des Gesprächs versendet eine Nachricht, die an den Benutzer
 gerichtet ist.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachbedingung
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Benutzer kann Nachrichten versenden und Nachrichten anderer Gesprächsteilneh
mer empfangen.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ergebnis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Nachricht wird dem Benutzer angezeigt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hauptszenario
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.
 Der Benutzer empfängt eine Nachricht.
\end_layout

\begin_layout Plain Layout
2.
 Der Benutzer verwendet den Initialisierungsvektor und Schlüssel zum Entschlüsse
ln der Nachricht.
\end_layout

\begin_layout Plain Layout
3.
 Die entschlüsselte Nachricht wird angezeigt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alternativszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1a.
 Ist die Nachricht nicht verschlüsselt, wird sie dem Benutzer direkt angezeigt.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ausnahmeszenarien
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist kein Initalisierungsvektor, Schlüssel oder Implementierung des verwendeten
 Kryptosystems vorhanden, so wird der unlesbare Geheimtext
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Geheimtext"
description "Der Geheimtext ist der Text, der durch die Verschlüsselung mittels eines kryptografischen Verfahrens unlesbar gemachte wurde."

\end_inset

 angezeigt.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Use-Case-Spezifikation Nachricht empfangen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Mockups
\begin_inset CommandInset label
LatexCommand label
name "sec:Mockups"

\end_inset


\end_layout

\begin_layout Standard
Mockups
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Mockup"
description "Ein Mockup in der Softwareentwicklung bezeichnet einen rudimentären Wegwerfprototypen der Benutzerschnittstelle einer zu erstellenden Software. Mock-ups werden insbesondere in frühen Entwicklungsphasen eingesetzt, um Anforderungen an die Benutzeroberfläche in Zusammenarbeit mit Auftraggeber und Anwendern besser ermitteln zu können. Es handelt sich meist um ein reines Grundgerüst der Bedienelemente ohne weitere Funktionalität."

\end_inset

 dienen zur Visualisierung der Benutzeroberfläche des zu entwickelnden Softwarep
rodukts und werden häufig bereits in der Anforderungsphase zusammen mit
 den Stakeholdern entwickelt.
 
\end_layout

\begin_layout Standard
Sie liefern dem Softwareentwickler in der Implmentationsphase (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Implementierung"

\end_inset

) ein Grundgerüst für die einzelnen Dialogfenster
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Dialog"
description "Als Dialog (oder Dialogfenster) bezeichnet man in der Softwareentwicklung eine grafische Benutzerschnittstelle zur Mensch-Maschine-Interaktion zwischen Computerprogramm und Benutzer."

\end_inset

.
 Je nach Kundenzielgruppe und Wichtigkeit der Mensch-Maschine-Schnittstelle
 wird mehr oder weniger Aufwand in die Entwicklung der Mockups investiert.
 Häufig werden diese mit zusammen mit Psychologen entwickelt und enthalten
 sehr wenig Interpretationsspielraum für den Softwareentwickler.
\end_layout

\begin_layout Subsection
Dialog Gespräch beitreten
\end_layout

\begin_layout Standard
Startet der Benutzer die Applikation so wird er gebeten, einen Benutzernamen
 zu wählen, unter welchem er im Gespräch Nachrichten versenden kann (Mockup
 siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Mockup-Dialog-Gespräch"

\end_inset

).
 Dabei wird der Benutzername auf eine Länge von 255 Zeichen beschränkt und
 er darf keine Sonderzeichen enthalten.
 Nach einem Klick auf den Button 
\begin_inset Quotes eld
\end_inset

Connect
\begin_inset Quotes erd
\end_inset

 werden diese Bedingungen überprüft und gegebenenfalls wird eine Verbindung
 zum Server hergestellt.
 Bei erfolgreichem Verbindungsaufbau wird der Dialog geschlossen und dem
 Benutzer wird der Gesprächsdialog (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Gesprächsdialog"

\end_inset

) angezeigt.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Mockups/Connect.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Mockup Dialog Gespräch beitreten
\begin_inset CommandInset label
LatexCommand label
name "fig:Mockup-Dialog-Gespräch"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Gesprächsdialog
\begin_inset CommandInset label
LatexCommand label
name "sub:Gesprächsdialog"

\end_inset


\end_layout

\begin_layout Standard
Ist der Benutzer einem Gespräch beigetreten so verwendet er den Gesprächsdialog
 zum Senden und Empfangen von Nachrichten (Mockup siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Gesprächsdialog"

\end_inset

).
 Das Gesprächsprotokoll stellt einen zeitlich geordneten Ablauf aller gesendeten
 und empfangenen Nachrichten dar.
 Weiterhin werden Aktionen wie ein Initialisierungsvektoraustausch oder
 das Setzen des Schlüssels eines Verschlüsselungsalgorithmus im Gesprächsprotoko
ll angezeigt.
 Auf der rechten Seite werden alle dem Gespräch beigetretenen Benutzer angezeigt.
 
\end_layout

\begin_layout Standard
Über die Textbox unterhalb des Gesprächsprotokolls lassen sich Nachrichten
 erfassen, die Nachricht muss dabei mindestens ein Zeichen lang sein.
 In der Dropdownliste rechts neben der Textbox werden alle installierten
 Kryptosysteme installiert, zusätzlich zur Voreinstellung 
\begin_inset Quotes eld
\end_inset

<None>
\begin_inset Quotes erd
\end_inset

, welche die Nachricht unverschlüsselt versendet.
 Ist kein Kryptosystem installiert, so kann der Benutzer keine Auswahl aus
 der Dropdownliste treffen.
 
\end_layout

\begin_layout Standard
Wählt der Benutzer ein Kryptosystem aus, für welchen noch kein Initialisierungsv
ektor vorhanden ist, so wird eine neuer Initialisierungsvektor generiert
 und den anderen Gesprächsteilnehmern zugesandt.
 Gleichzeitig wählt der Benutzer einen Schlüssel aus.
 Wird auf den Button 
\begin_inset Quotes eld
\end_inset

Send
\begin_inset Quotes erd
\end_inset

 geklickt, wird die Nachricht an die anderen Gesprächsteilnehmer versendet.
\end_layout

\begin_layout Standard
Beim Schliessen der Applikation verlässt der Benutzer das Gespräch und der
 Gesprächsdialog schliesst sich selbst.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Mockups/Messaging.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Mockup Gesprächsdialog
\begin_inset CommandInset label
LatexCommand label
name "fig:Mockup-Gesprächsdialog"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Konzept und Architektur
\begin_inset CommandInset label
LatexCommand label
name "chap:Konzept-und-Architektur"

\end_inset


\end_layout

\begin_layout Standard
Die Konzeptphase
\begin_inset Foot
status open

\begin_layout Plain Layout
auch Designphase genannt
\end_layout

\end_inset

 des Wasserfallmodells behandelt die Entwicklung eines vollständigen und
 umfassenden Lösungskonzepts auf Basis der dokumentierten Anforderungen
 (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Oestereich2006"

\end_inset

).
 Als Grundlage für das Konzept wird in einem ersten Schritt die Toolchain
 erfasst, welche weitere (technisch) Rahmenbedingungen für das Konzept und
 die Archtektur des Systems vorgibt.
 Weiter wird zuerst das Konzept aus der Bausteinperspektive betrachtet,
 es wird von der Komponentenebene bis zur Klassenebene das System modelliert
 und die Architektur des Systems festgelegt.
 Als weitere Sicht wird die Laufzeitsicht und die Verteilungssicht des Systems
 beleuchtet und spezifiziert.
\end_layout

\begin_layout Section
Toolchain
\end_layout

\begin_layout Standard
Der erste Schritt der Konzepterstellung ist das Erarbeiten und Evaluieren
 der Toolchain.
 Die Toolchain beeinhaltet Frameworks und Entwicklungswerkzeuge, mit denen
 der Entwickler später arbeitet und gibt einen groben technischen Rahmen
 vor, der bei der Konzepterstellung und insbesondere bei der Erarbeitung
 der Systemarchitektur berücksichtigt werden muss.
\end_layout

\begin_layout Standard
Basis der verwendeten Tools und Frameworks wird Microsofts .NET Framework
 in der Version 4.0 sein.
 Dies primär aufgrund der Möglichkeiten welche die Windows Communication
 Foundation (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Windows-Communication-Foundation"

\end_inset

) zur Realisierung von Webservices bietet sowie Windows Presentation Foundation
 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Windows-Presentation-Foundation"

\end_inset

) beziehungsweise Silverlight (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Silverlight"

\end_inset

) für grafische Applikationen für die Windows Plattform.
 Als Entwicklungswerkzeug wird Microsoft Visual Studio 2010 eingesetzt zusammen
 mit dem Package Manager NuGet
\begin_inset Foot
status open

\begin_layout Plain Layout
Mehr zum Package Manager NuGet ist unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://nuget.codeplex.com/
\end_layout

\end_inset

 zu finden.
\end_layout

\end_inset

 zur Verwaltung der externen Abhängigkeiten.
 Zur Dateiverwaltung wird der online Hosting-Dienst Github
\begin_inset Foot
status open

\begin_layout Plain Layout
Das Github Repository für YAEM ist unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/famstutz/YAEM
\end_layout

\end_inset

 öffentlich verfügbar.
\end_layout

\end_inset

 eingesetzt, welcher als Versionsverwaltungssystem Git
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Git"
description "Git ist eine freie Software zur verteilten Versionsverwaltung von Dateien, die ursprünglich für die Quellcode-Verwaltung des Kernels Linux entwickelt wurde."

\end_inset

 verwendet.
\end_layout

\begin_layout Section
Bausteinsicht
\end_layout

\begin_layout Standard
Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

 und 
\begin_inset CommandInset citation
LatexCommand cite
key "Hruschka2012"

\end_inset

 lassen sich unter dem Begriff 
\begin_inset Quotes eld
\end_inset

Bausteine
\begin_inset Quotes erd
\end_inset

 sämtliche Software- oder Implementierungskomponenten zusammenfassen, die
 letztendlich Abstraktionen von Quellcode darstellen.
 Dazu gehören Klassen, Prozeduren, Programme, Pakete, Komponenten (nach
 der UML-Definition) oder Subsysteme.
\end_layout

\begin_layout Standard
Die Bausteinsicht bildet die Aufgaben des System auf Software-Bausteine
 oder -Komponenten ab.
 Diese Sicht macht Struktur und Zusammenhänge zwischen den Bausteinen der
 Architektur explizit.
 Bausteinsichten zeigen statische Aspekte von Systemen und entsprechen in
 dieser Hinsicht den konventionellen Implementierungsmodellen.
\end_layout

\begin_layout Subsection
Komponentendiagramm
\end_layout

\begin_layout Standard
Das Komponentendigramm in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Komponentendiagramm"

\end_inset

 stellt das System YAEM aus der Vogelperspektive dar und ist die höchstabstrahie
rte Ansicht der Bausteinsicht die in diesem Projekt existiert.
 
\end_layout

\begin_layout Standard
Der ServiceHost
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ServiceHost"
description "Der ServiceHost implementiert den Host, der vom Progammiermodell für das Windows Communication Foundation (WCF)-Dienstmodell verwendet wird."

\end_inset

 stellt die Serverapplikation des Systems dar und implementiert die beiden
 Schnittstellen
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Zusammenhang mit WCF auch Service Contracts
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Service Contract"
description "Ein Service Contract bezeichnet eine Schnittstelle oder Klasse die zur Kommunikation für verteilte Systeme genutzt werden können."

\end_inset

 genannt.
\end_layout

\end_inset

 
\emph on
IUserService
\emph default
 und 
\emph on
IMessagingService
\emph default
 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Service-Contracts"

\end_inset

).
 Er stellt die Schnittstellen als Webservice den Clientapplikationen zur
 Verfügung.
 
\end_layout

\begin_layout Standard
Die Clientapplikationen (die in einer Vielzahl von Frameworks implementiert
 sein können) benutzen diese Schnittstellen um mit der Serverapplikation
 zu kommunizieren.
 Die Clientapplikationen benutzen das Managed Extensibility Framework
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Managed Extensibility Framework"
description "Das Managed Extensibility Framework (kurz MEF) ist ein Kompositionframework zum Erstellen einer Plugininfrasktruktur innerhalb einer Applikation. Es erhöht die Flexibilität, Erweiterbarkeit und Testbarkeit von grossen Applikationen."

\end_inset

(mehr in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Managed-Extensibility-Framework"

\end_inset

) um dynamisch die Implementierungen der Kryptosysteme (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Kryptoalgorithmen"

\end_inset

) zur Laufzeit laden und verwenden zu können.
 Dadurch wird gewährleistet, dass die Serverapplikation zu keinem Zeitpunkt
 die verschlüsselten Nachrichten, die über sie versendet werden, im Klartext
 lesen kann.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/ComponentModel.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Komponentendiagramm
\begin_inset CommandInset label
LatexCommand label
name "fig:Komponentendiagramm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Domänenmodell
\begin_inset CommandInset label
LatexCommand label
name "sub:Domänenmodell"

\end_inset


\end_layout

\begin_layout Standard
Das Domänenmodell (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-Domänenmodell"

\end_inset

) umfasst nur die Klassen der Objekte, die über die Serviceschnittstelle
 von der Client
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Client"
description "Ein Client (oder Clientapplikation) ist eine Softwareanwendung die im Gegensatz zu einer Serverapplikation auf dem Rechner des Benutzers ausgeführt wird."

\end_inset

- an die Serverapplikation
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Server"
description "Ein Server (auch Serverapplikation) ist eine serverseitige Anwendung die auf einem zentralen Computer (Server) ausgeführt wird."

\end_inset

 beziehungsweise umgekehrt übertragen werden.
 
\end_layout

\begin_layout Standard
YAEM verwendet ein vergleichsweise simples Domänenmodell.
 Jeder Benutzer wird als 
\emph on
User
\emph default
objekt im Repository
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Repository"
description "Ein Repository ist ein Verzeichnis zur Speicherung einer von digitalen Objekten. In diesem Kontext ist ein Repository eine Datenbank zur Speicherung und zum Wiederfinden von Objekten."

\end_inset

 gespeichert.
 Bei erfolgreichem Gesprächsbeitritt erstellt die Serverapplikation ein
 
\emph on
Ticket
\emph default
objekt, welches an die Clientapplikation zurückgegeben wird.
 Wird eine Nachricht versendet, so erstellt der Client ein 
\emph on
Message
\emph default
objekt, welches die Nachricht selbst als Bytearray
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Bytearray"
description "Ein Bytearray ist eine Datenstruktur die als Container für Byte-Werte (ganzzahlige Werte von 0 bis 255) dient."

\end_inset

 in der Eigenschaft 
\emph on
Payload
\emph default
 speichert.
 Will der Benutzer eine verschlüsselte Nachricht versenden, so setzt er
 die Eigenschaft 
\emph on
Algorithm
\emph default
 des 
\emph on
Message
\emph default
objekts auf einen Wert des Enumerators 
\emph on
CryptoAlgorithm
\emph default
, der ungleich 
\emph on
None
\emph default
 ist.
 Wenn die Eigenschaft 
\emph on
Algorithm
\emph default
 gesetzt ist, so muss der Benutzer den 
\emph on
Payload
\emph default
 verschlüsselt in der 
\emph on
Message
\emph default
 ablegen.
\end_layout

\begin_layout Standard
Sämtliche Domänenobjekte leiten von der Klasse 
\emph on
ObjectBase
\emph default
 ab.
 
\emph on
ObjectBase
\emph default
 enthält einen Schlüssel 
\emph on
Key
\emph default
 in Form einer Globally Unique Identifier
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Globally Unique Identifier"
description "Ein Globally Unique Identifier (auch GUID genannt) ist eine eindeutige, 128 Bit lange Zahl, die zur Identifzierung von Objekten in verteilten Systemen dienen."

\end_inset

 zur eindeutigen Identifizierung der Objekte in den Repositories.
 Weiterhin implementiert 
\emph on
ObjectBase
\emph default
 das Interface 
\emph on
INotifyPropertyChanged
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Die genaue Schnittstellenbeschreibung ist in der MSDN unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.
aspx
\end_layout

\end_inset

 zu finden.
\end_layout

\end_inset

, welches in der Windows Presentation Foundation
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "WPF"
description "Windows Presentation Foundation (kurz WPF) ist ein Grafik-Framework das zusammen mit dem .NET Framework mitgeliefert wird und zur Darstellung von UI-Elementen dient."

\end_inset

 und Silverlight
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Silverlight"
description "Silverlight ist eine Erweiterung für Webbrowser, welche die Ausführung von Rich Internet Applications erlaubt. Silverlight ist eine abgespeckte Version von WPF und wird für auch als Framework für Windows Phone 7 verwendet."

\end_inset

 dazu dient, UI-Elemente, die an Datenobjekte gebunden sind, über geänderte
 Eigenschaften zu informieren.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/DomainModel.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm Domänenmodell
\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-Domänenmodell"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Service Contracts
\begin_inset CommandInset label
LatexCommand label
name "sub:Service-Contracts"

\end_inset


\end_layout

\begin_layout Standard
Ein Service Contract spezifiziert eine Schnittstelle zur Kommunikation verschied
ener Applikationen innerhalb eines verteilten Systems.
 Häufig werden diese Service Contracts als Webservice
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Webservice"
description "Ein Webservice ist eine Softwareapplikation, auf den über eine URL eindeutig idenifiziert ist und Daten als XML-Artefakt zurückgibt. Er wird über internetbasierte Protokolle angesprochen."

\end_inset

 angeboten, da sie dadurch plattform- und frameworkunabhängig implementiert
 genutzt werden können.
 
\end_layout

\begin_layout Standard
Typischerweise umfasst ein Service Contract mehrere Operationen, deren Rückgabew
erte als XML-Fragmente an die konsumierende Applikation zurückgegeben werden.
 Ausserdem ist ein Service Contract per Definition grundsätzlich zustandslos,
 er behandelt mehrere Anfragen (auch desselben Auftraggebers) immer als
 unabhängige Transaktionen.
 Anfragen werden ohne Bezug zu früheren, vorhergegeganen Anfragen behandelt
 und es werden auch keine Sitzungsinformationen ausgetauscht.
\end_layout

\begin_layout Subsubsection
IUserService
\begin_inset CommandInset label
LatexCommand label
name "sub:IUserService"

\end_inset


\end_layout

\begin_layout Standard
Die in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-IUserService"

\end_inset

 gezeigte Schnittstelle 
\emph on
IUserService
\emph default
 stellt die Benutzerverwaltungsfunktionalitäten des Sytems zur Verfügung.
 Der Konsument des Webservices übergibt beim Anmelden (Methode 
\emph on
Join
\emph default
) ein 
\emph on
User
\emph default
objekt an den Server, über welches der Benutzer identifiziert werden kann.
 Wird der Benutzer erfolgreich angemeldet, wird ein 
\emph on
Session
\emph default
objekt an den Konsumenten zurückgegeben.
 Das Gegenstück zur Methode 
\emph on
Join
\emph default
 ist die Methode 
\emph on
Leave
\emph default
, die eine 
\emph on
Session
\emph default
 für ungültig erklärt.
\end_layout

\begin_layout Standard
Die Methoden 
\emph on
Subscribe
\emph default
 und 
\emph on
Unsubscribe
\emph default
 werden vor dem Aufruf von 
\emph on
Join
\emph default
 bzw.
 nach dem Aufruf von 
\emph on
Leave
\emph default
 aufgerufen und ermöglich es der Serverapplikation Callbacks
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Callback"
description "Ein Callback (zu deutsch Rückruffunktion) bezeichnet eine Funktion, der als Parameter eine andere Funktion übergeben wird, die unter gewissen Bedingungen aufgerufen wird."

\end_inset

 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:IServiceCallback"

\end_inset

) an alle registrierten Clients zu versenden um sie über dem Gespräch neue
 hinzgekommene Benutzer oder Benutzer, die das Gespräch verlassen haben,
 zu informieren.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Class-IUserService.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm 
\emph on
IUserService
\emph default

\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-IUserService"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
IMessagingService
\begin_inset CommandInset label
LatexCommand label
name "sub:IMessagingService"

\end_inset


\end_layout

\begin_layout Standard
Über die Schnittstelle 
\emph on
IMessagingService
\emph default
 werden Nachrichten in Form eines 
\emph on
Message
\emph default
objekts übertragen (siehe Klassendiagramm in Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-IMessagingServic"

\end_inset

).
 Die Clientapplikation als Sender einer Nachricht übergibt beim Aufruf der
 Methode 
\emph on
Send
\emph default
 neben der 
\emph on
Message
\emph default
 auch noch seine 
\emph on
Session
\emph default
 mit, damit die Serverapplikation überprüfen kann, ob der Benutzer eine
 gültige, nicht abgelaufene 
\emph on
Session
\emph default
 besitzt.
 
\end_layout

\begin_layout Standard
Die Methoden 
\emph on
NegotiateInitializationVector
\emph default
 und 
\emph on
NegotiateKey
\emph default
 dienen zur Übermittlung des Initialisierungsvektors beziehungsweise des
 Schlüssels für ein Kryptosystem vom Typ 
\emph on
CryptoAlgorithm
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Class-IMessagingService.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm 
\emph on
IMessagingService
\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-IMessagingServic"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
IServiceCallback
\begin_inset CommandInset label
LatexCommand label
name "sub:IServiceCallback"

\end_inset


\end_layout

\begin_layout Standard
Damit über das HTTP
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "HTTP"
description "Das Hypertext Transfer Protocol (kurz HTTP) ist ein Protokoll zur Übertragung von Daten über ein Netzwerk. Es ist das meisteingesetzte Protokoll zur Übertragung von Webseiten im World Wide Web (WWW)."

\end_inset

 Callbacks (der Mechanismus wird detaillierter 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Callbacks-über-NetHttpDualBindin"

\end_inset

 beschrieben) versendet werden können, müssen alle Clientapplikationen,
 die den Webservice der Serverapplikation verwenden, die Schnittstelle 
\emph on
IServiceCallback
\emph default
 implementieren.
 Die beiden Schnittstellen 
\emph on
IUserService
\emph default
 und 
\emph on
IMessagingService
\emph default
 werden mit 
\emph on
[ServiceContract(CallbackContract = typeof(IServiceCallback))] 
\emph default
annotiert
\begin_inset Foot
status open

\begin_layout Plain Layout
Details zum ServiceContractAttribute sind in der MSDN unter 
\begin_inset CommandInset href
LatexCommand href
target "http://msdn.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.aspx"

\end_inset

 zu finden.
\end_layout

\end_inset


\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Annotation"
description "Eine Annotation bezeichnet ein Sprachelement im Quelltext, das zur Einbindung von Metadaten im Quelltext dient."

\end_inset

 so dass beim Abbonnieren des Webservices der generierte Serviceclient des
 Webservices gezwungen wird die Schnittstelle 
\emph on
IServiceCallback
\emph default
 zu implementierern.
\end_layout

\begin_layout Standard
Die Schnittstelle ist eine zusammengefasste Schnittstelle aller Callbackoperatio
nen der beiden Serviceschnittsellen 
\emph on
IUserService
\emph default
 und 
\emph on
IMessagingService
\emph default
, die in der Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Methoden-von-IServiceCallback"

\end_inset

 beschrieben sind sowie in der Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-IServiceCallback"

\end_inset

 als Klassendiagramm grafisch dargestellt sind.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="8.5cm">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Methode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Aufgabe
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
NotifyNegotiateIntializationVector
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teilt dem Client mit, dass für ein Kryptosystem ein neuer Intialisierungsvektor
 generiert wurde.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
NotifyNegotiateKey
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teilt dem Client mit, dass für ein Kryptosystem ein neuer Schlüssel gesetzt
 wurde.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
NotifyNewMessage
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teilt dem Client mit, dass eine neue Nachricht an ihn gesendet wurde.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
NotifyUserJoined
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teilt dem Client mit, dass ein neuer Benutzer dem Gespräch beigetreten ist.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
NotifyUserLeft
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Teilt dem Client mit, dass ein Benutzer das Gespräch verlassen hat.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Methoden von 
\emph on
IServiceCallback
\begin_inset CommandInset label
LatexCommand label
name "tab:Methoden-von-IServiceCallback"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Class-IServiceCallback.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm 
\emph on
IServiceCallback
\emph default

\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-IServiceCallback"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Kryptosysteme
\begin_inset CommandInset label
LatexCommand label
name "sub:Kryptoalgorithmen"

\end_inset


\end_layout

\begin_layout Standard
Ein Ziel dieses Projekts war es, die Implementierungen von Kryptosystemen
 als eigenständige Assemblies
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Assembly"
description "Übersetzter Quellcode als ausführbares Programm wird in .NET in sogeannten Assemblies zusammengefasst, ähnlich den Jar-Dateien in Java. Die Dateiendungen dieser Assemblies sind .exe oder .dll, zusätzlich zum ausführbaren Programmcode enhalten sie auch alle iM Manifest notwendigen Metadaten."

\end_inset

 zu kompilieren und zur Laufzeit den Clientapplikationen zur Verfügung zu
 stellen.
 Aus diesem Grund müssen alle Kryptosystemen die Schnittstelle 
\emph on
ICryptoProvider 
\emph default
implementieren.
\end_layout

\begin_layout Standard

\emph on
ICryptoProvider
\emph default
 liefert die grundlegenden Funktionalitäten zur Implementierung von symmetrische
n Kryptosystemen, bei welchen beide Teilnehmer den gleichen Schlüssel verwenden
 (mehr zu symmetrischen und asymmetrischen Kryposystemen in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Kryptosysteme"

\end_inset

).
 Alle Nutzdaten (verschlüsselt oder unverschlüsselt) werden als Bytearrays
 übergeben, so dass sie einfach und ohne Zusatzaufwand über einen Webservice
 serialisiert übergeben werden können.
 Jedes symmetrische Kryptosystem enthält einen Initalisierungsvektor, der
 einen Block von Zufallsdaten bezeichnet, sowie einen Schlüssel, der nur
 dem Sender und Empfänger bekannt ist.
 Aus diesem Grund enthält 
\emph on
ICryptoProvider
\emph default
 auch keine Methode 
\emph on
GetKey
\emph default
, da der Schlüssel innerhalb eines Kryptosystems nicht zugänglich sein darf.
\end_layout

\begin_layout Standard
Die Methoden 
\emph on
Encrypt
\emph default
 bzw.
 
\emph on
Decrypt
\emph default
 verschlüsselt bzw.
 entschlüsseln übergebene Nutzdaten.
 Im Klassendiagramm (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-Kryptoalgorithme"

\end_inset

) werden zusätzlich zur Schnittstelle 
\emph on
ICryptoProvider
\emph default
 auch die drei beispielhaften Implementierungen der symmetrischen Kryptosystemen
 AES, Rijndael und Triple-DES dargestellt.
 Jedes dieser Kryptosysteme wird in eine eigene Assembly kompiliert und
 zur Laufzeit der Clientapplikatikonen mit Hilfe des Managed Extensibility
 Frameworks (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Managed-Extensibility-Framework"

\end_inset

) geladen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Class-Crypto.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm Kryptoalgorithmen
\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-Kryptoalgorithme"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Server
\begin_inset CommandInset label
LatexCommand label
name "sub:Server"

\end_inset


\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Klassendiagramm-Server"

\end_inset

 zeigt das Klassendiagramm der Serverapplikation dar.
 Die Serverapplikation stellt die beiden Webservices 
\emph on
IMessagingService
\emph default
 und 
\emph on
IUserService
\emph default
 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Service-Contracts"

\end_inset

) im zusammengeführten Servicehost 
\emph on
Services
\emph default
 der Aussenwelt zur Verfügung.
 Daraus ergibt sich eine Verwaltung der angemeldeten Benutzer und deren
 Sessions sowie das Aufrufen der passenden Callbacks bei entsprechenden
 Serviceoperationen.
 
\end_layout

\begin_layout Standard
Dank des Bindings (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Bindings"

\end_inset

) kann die Serverapplikation Delegates
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Delegate"
description "Ein Delegate (dt. Delegat) ist ein Methodenzeiger und wird verwendet um auf eine Methode einer Klasse oder eines Objekts zu verweisen. "

\end_inset

 der Callbackoperationen aller registrierten Clientapplikationen verwalten
 und dadurch z.B.
 beim Eintreffen einer neuen Nachricht die Callbackoperation 
\emph on
NotifyNewMessage
\emph default
 (siehe 
\emph on
IServiceCallback
\emph default
 in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "tab:Methoden-von-IServiceCallback"

\end_inset

) der registrierten Clients aufrufen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Class-Server.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Klassendiagramm Server
\begin_inset CommandInset label
LatexCommand label
name "fig:Klassendiagramm-Server"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Client
\end_layout

\begin_layout Standard
Für die Clientapplikationen wird kein gesondertes Konzept erstellt, da sich
 ihre Logik auf das Benutezn der Webservices der Serverapplikation (siehe
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Server"

\end_inset

) beschränkt, die über eine Service Reference
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Service Reference"
description "Über eine Service Reference erstellt das .NET Framework einen Clientproxy basierend auf einem Webservice und stellt die so verfügbaren Methoden in generiertem Quellcode der Applikation zur Verfügung."

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
In der MSDN finden sich unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/bb907578.aspx
\end_layout

\end_inset

 mehr Informationen zu Service References.
\end_layout

\end_inset

 eingebunden werden.
 Dadurch werden die Clientapplikationen gezwungen, das Interface 
\emph on
IServiceCallback
\emph default
 (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:IServiceCallback"

\end_inset

) zu implementieren.
 
\end_layout

\begin_layout Standard
Ansonsten ergibt sich die logische Struktur der Clientapplikation aus dem
 verwendeten GUI-Framework.
\end_layout

\begin_layout Section
Laufzeitsicht
\end_layout

\begin_layout Standard
Die Laufzeitsicht beschreibt, welche Bestandteile des Systems zur Laufzeit
 existieren und wie diese zusammenwirken (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

).
 Dabei kommen wichtige Aspekte des Systembetriebs ins Spiel, die beispielsweise
 den Systemstart, die Laufzeitkonfiguration oder die Administration des
 Systems betreffen.
\end_layout

\begin_layout Standard
Darüber hinaus dokumentiert die Laufzeitsicht, wie Laufzeitkomponenten sich
 aus Instanzen von Implementierungsbausteinen zusammensetzen.
 
\end_layout

\begin_layout Subsection
Gespräch beitreten
\end_layout

\begin_layout Standard
Möchte ein Benutzer einem Gespräch beitreten so gibt er über das ConnectWindow
 (siehe 
\noun on
[Referenz]
\noun default
) seinen gewünschten Benutzernamen ein.
 Der Loop UserName in use stellt dar, dass der Benutzer solange einen Benutzerna
men auswählen muss bis er einen Benutzernamen wählt, der noch nicht dem
 Gespräch beigetreten ist.
 Ist der Benutzername frei, so erstellt wird von der Serverapplikation in
 der SessionsStorage ein neues SessionTicket gelöst, das der Clientapplikation
 zurückgegeben wird.
 
\end_layout

\begin_layout Paragraph*
Sequenzdiagramm
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Sequence-GespraechBeitreten.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequenzdiagramm Gespräch beitreten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Gespräch verlassen
\end_layout

\begin_layout Standard
Möchte der Benutzer das Gespräch verlassen so initiiert er über das MessagingWin
dow eine Anfrage an die Serverapplikation zum Verlassen des Gesprächs.
 In der SessionStorage wird dann das SessionTicket des Benutzers entfernt
 und der Clientapplikation wird mitgeteilt, dass der Benutzer erfolgreich
 das Gespräch verlassen hat und keine Nachrichten mehr senden oder empfangen
 kann.
\end_layout

\begin_layout Paragraph*
Sequenzdiagramm
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Sequence-GespraechVerlassen.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequenzdiagramm Gespräch verlassen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Nachricht senden
\end_layout

\begin_layout Standard
Möchte der Benutzer eine Nachricht vesenden so muss er, falls noch kein
 Initalisierungsvektor für den gewählten Kryptoalgorithmus gesetzt ist,
 zuerst einen Initialisierungsvektor setzen.
 Dasselbe gilt für den Schlüssel des gewählten Kryptoalgorithmus, ist er
 innerhalb des gesamten Gesprächs noch nie gesetzt worden, so muss der Schlüssel
 vom Benutzer gewählt werden.
\end_layout

\begin_layout Standard
Sind die beiden Bedingungen (Initialisierungsvektor und Schlüssel gesetzt)
 erfüllt, wird die Nachricht an den Webservice weitergegeben und falls die
 gewählten Empfänger ein gültiges SessionTicket bestitzen und beim Webservice
 einen Delegaten als Callback hinterlegt haben wird ihnen die Nachricht
 übermittelt.
 Der Benutzer erhält anscheinend eine Bestätigung des Nachrichtenversandes.
\end_layout

\begin_layout Paragraph*
Sequenzdiagramm
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Sequence-NachrichtSenden.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sequenzdiagramm Nachricht senden
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Verteilungssicht
\end_layout

\begin_layout Standard
Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Starke2011"

\end_inset

 beschreibt die Verteilungssicht die Ablaufumgebung des Systems in Form
 von Hardwarekomponenten (wie Prozessoren, Speicher, Netzwerk, Router und
 Firewalls) mit den beteiligten Protokollen.
 In der Infrastruktursicht können die Leistungsdaten und Parameter der beteiligt
en Elemente dargestellt werden.
 Ausserdem werden zusätzlich Betriebssysteme oder externe Systeme aufgenommen.
\end_layout

\begin_layout Standard
Die Verteilungssicht ist von grosser Beduetung für die Betreiber des Systems,
 die Hardwarearchitekten, das Entwicklungsteam sowie Management und Projektleitu
ng (gemäss 
\begin_inset CommandInset citation
LatexCommand cite
key "Hruschka2012"

\end_inset

).
\end_layout

\begin_layout Subsection
Verteilungsdiagramm
\end_layout

\begin_layout Standard
Die Verteilungssicht in dieser Dokumentation beinhaltet nur ein Verteilungsdiagr
amm das sehr rudimentär und ohne grosse Details aufgezeichnet wird.
 Dies, da kein konkretes Verteilungsszenario der Applikation innerhalb des
 Projekts geplant wurde.
 Das Projekt beeinhaltet die Erarbeitung des Konzepts sowie die konkrete
 Implementierung der Applikation ohne jedoch konkrete Hardware bzw.
 vorzugeben auf welchen die einzelnen Applikationen laufen sollen.
 
\end_layout

\begin_layout Standard
Generell können die einzelnen Clientapplikationen auf jeglicher Hardware
 laufen, benötigen jedoch jeweils das passende Betriebssystem bzw.
 im Fall des Silverlight-Clients einen Browser mit Silverlight Plugin.
 Zwischen den Clientapplikationen und der Serverapplikation in Form des
 Servicehosts wird eine Netzwerkverbindung vorausgesetzt bei welcher die
 passenden Ports (siehe Binding 
\noun on
[Referenz]
\noun default
) geöffnet und zugänglich sind.
 Auch ist eine Verteilung über das WWW denkbar.
\end_layout

\begin_layout Paragraph*
Verteilungsdiagramm
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ExportedDiagrams/Deployment-Verteilungsdiagramm.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Verteilungsdiagramm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Implementierung
\begin_inset CommandInset label
LatexCommand label
name "chap:Implementierung"

\end_inset


\end_layout

\begin_layout Standard
Das Kapitel Implementierung beschäftigt sich zuerst mit der Wahl der geeigneten
 Entwicklungsmethode für dieses Projekt.
 Als Nächstes werden verschiedene Technologien vorgestellt, die innerhalb
 des Projekts Anwendung finden und für das weitere Verständnis des Quellcodes
 oder dieser Dokumentation notwendig sind.
 Auch wird auf einzelne besondere Entwurfsmuster näher eingegangen, insbesondere
 für die UI-Frameworks.
 Auch wird ein theoretischer Überblick über asymmetrische und symmetrische
 Kryptosysteme gegeben sowie wie diese in YAEM eingebunden werden können.
 Abschliessend werden die einzelnen Visual Studio-Projekte als Teilkomponenten
 des Projekts vorgestellt sowie während der Implementierungsphase aufgetretenen
 Probleme beschrieben, ihre Auswirkungen auf Teile des Projekterfolgs erläutert
 sowie eventuelle Lösungsvorschläge aufgezeigt.
\end_layout

\begin_layout Section
Entwicklungsmethoden
\end_layout

\begin_layout Standard
Als pragmatischer Softwareentwickler versucht man den Blick auf das wesentliche
 zu konzentrieren: Anforderungen in ein funktionierendes und warbares Programm
 zu überführen, das die Anwender begeistert (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Hunt1999"

\end_inset

).
 Um dieses Ziel zu erreichen existieren eine breite Palette an Entwicklungsmetho
den, die den Entwickler bei seiner (pragmatischen) Arbeitsweise unterstüzen.
 Insbesondere agile Entwicklungsmethoden wie Scrum oder Extreme Programming
 (XP) unterstützen ein Entwicklungsteam in der Konzentration auf die Implementie
rung von Funktionalitäten in einem Softwareprodukt und helfen vor Ablenkungen
 wie der zunehmenden Spezialisierung und Technisierung.
\end_layout

\begin_layout Standard
Für dieses Projekt wurde Test Driven Development (TDD) als Entwicklungsmethode
 gewählt da die iterative Entwicklung, die auf dem Erstellen des Unit Tests
\begin_inset Foot
status open

\begin_layout Plain Layout
Mehr zu automatisierten Tests findet sich im Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Unit-Tests"

\end_inset

.
\end_layout

\end_inset

 fundiert (genauer beschrieben in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Testgetriebene-Entwicklung"

\end_inset

) die Fokussierung auf die für den Benutzer relevanten Funktionalitäten
 ermöglicht.
 Studien wie 
\begin_inset CommandInset citation
LatexCommand cite
key "Nagappan2008"

\end_inset

 beweisen ausserdem dass mit Hilfe von TDD die allgemeine Qualität eines
 Softwareprodukts steigt da z.B.
 schon die Fehlerdichte (gemessen in Anzahl Fehler pro tausend Zeilen Code)
 zwischen 40% und 90% relativ kleiner ist als bei Softwareprodukten, die
 nicht mit TDD entwickelt wurden.
 Es wurde zwar der initiale Entwicklungsaufwand zwischen 15% und 35% erhöht,
 jedoch wurde dies im Nachhinein durch geringere Wartungskosten ausgeglichen.
\end_layout

\begin_layout Subsection
Testgetriebene Entwicklung
\begin_inset CommandInset label
LatexCommand label
name "sub:Testgetriebene-Entwicklung"

\end_inset


\end_layout

\begin_layout Standard
Test Driven Development (kurz TDD, deutsch Testgetriebene Entwicklung) ist
 eine evolutionäre Entwicklungsmethode, die häufig zusammen mit agilen Methoden
 Anwendung findet.
 Dabei werden Tests entsprechend den Anforderungen an eine Funktion erstellt
 und erst im Nachhinein der funktionale Code implementiert (gemäss 
\begin_inset CommandInset citation
LatexCommand cite
key "Bullinger2010"

\end_inset

).
\end_layout

\begin_layout Standard
Die Tests werden meist innerhalb eines Unit-Test-Frameworks (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Unit-Tests"

\end_inset

) implementiert und laufen gelassen.
 Zu Beginn werden die Tests fehlschlagen, da noch gar kein Code implementiert
 worden ist.
 Ziel des Entwicklers ist es, den Code so lange zu verbessern, bis alle
 zugehörigen Tests bestanden werden.
\end_layout

\begin_layout Standard
Kommen neue Anforderungen oder Funktionen hinzu, werden zuerst neue Tests
 implementiert und danach der Code erweitert.
 Danach werden alle Test erneut durchgeführt, solange bis wieder alle Tests
 bestanden werden.
 
\end_layout

\begin_layout Standard
Zusammengefasst folgt man drei einfachen Schritten bei der Anwendung von
 TDD (frei nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Fowler2012"

\end_inset

, siehe auch 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Schritte-in-TDD"

\end_inset

):
\end_layout

\begin_layout Enumerate
Einen Test schreiben für das nächste Stück von Funktionalität, das der Applikati
on hinzugefügt werden soll
\end_layout

\begin_layout Enumerate
Funktionalen Code schreiben bis der Test erfüllt wird
\end_layout

\begin_layout Enumerate
Neuen und alten Code umgestalten um ihn besser zu strukturieren
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/tddSteps.jpg
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Schritte in TDD (aus 
\begin_inset CommandInset citation
LatexCommand cite
key "Ambler2011"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:Schritte-in-TDD"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Durch die Anwendung von TDD wird der bestehende und neue Code fortlaufend
 optimiert und ist leicht zu ändern.
 Die enthaltenen Funktionen werden durch die Tests zugleich dokumentiert
 und Fehler werden früher entdeckt und sind durch Mini-Iterationen leichter
 lokalisierbar.
 Besonders in grossen Teams entsteht ein Qualitätsbewusstsein über das ganze
 Projekt hinweg, nicht nur bei einer kleinen Expertengruppe.
\end_layout

\begin_layout Standard
Nachteilig ist anzumerken, dass konsequent sämtlicher Code testdriven erstellt
 werden muss.
 Für Entwickler, die noch nie mit TDD in Berührung gekommen sind, ist es
 schwierig sich vorzustellen, wie etwas getestet werden soll, das noch nicht
 existiert.
 Generell funktioniert TDD auch nur, wenn alle Entwickler ein fundiertes
 Wissen über Testmethodiken besitzen.
 Man muss sich auch bewusst sein, dass TDD keine weiteren Tests wie Integrations
- oder Akzeptanztests ersetzt.
\end_layout

\begin_layout Section
Verwendete Technologien
\begin_inset CommandInset label
LatexCommand label
name "sec:Verwendete-Technologien"

\end_inset


\end_layout

\begin_layout Standard
Dieses Kapitel gibt einen Überblick über die in der Semesterarabeit verwendeten
 Technologien und dient zum besseren Verständnis der einzelnen Teile des
 Softwareprodukts, die in einem späteren Kapitel (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Komponenten-im-Detail"

\end_inset

) genauer beschrieben werden.
\end_layout

\begin_layout Standard
Die einzelnen Unterkapitel bieten einen losen Überblick über verschiedenste
 Technologien und Produkte und erläutert wo und wieso die jeweilige Technologie
 im Softwareprodukt eingesetzt wird.
\end_layout

\begin_layout Subsection
Managed Extensibility Framework
\begin_inset CommandInset label
LatexCommand label
name "sub:Managed-Extensibility-Framework"

\end_inset


\end_layout

\begin_layout Standard
Ein Ziel des Softwareproduktes YAEM war es, zur Laufzeit beliebige Kryptosysteme
 den Clientapplikationen zur Verfügung zu stellen die als Erweiterungen
 angebunden werden können.
 MEF bietet genau diese Funktionalität.
\end_layout

\begin_layout Standard
Das Managed Extensibility Framework oder MEF ist eine Bibliothek für die
 Erstellung von leichten, erweiterbare Anwendungen.
 Es erlaubt Anwendungsentwicklern zu Erweiterungen zu Applikationen zu schreiben
, die keinerlei Konfiguration benötigen.
 Ausserdem können Entwickler Erweiterungen leicht kapseln und somit fragile
 harte Abhängigkeiten zu vermeiden.
 MEF ermöglicht nicht nur Erweiterungen die innerhalb von Anwendungen wiederverw
endet werden können, sondern auch über Anwendungen hinweg.
\end_layout

\begin_layout Standard
MEF besteht aus einem Katalog (
\emph on
Catalog
\emph default
) und einem sogenannten Behälter (
\emph on
CompositionContainer
\emph default
).
 Ein Katalog ist verwantwortlich für das Entdecken der Erweiterungen und
 der Behälter koordiniert die Erstellung erfüllt die Abhängigkeiten.
 MEF-Erweiterungen sind Ersatzteile (
\emph on
ComposablePart
\emph default
) und ein Ersatzteil bietet ein oder mehrere Exporte, und kann auch von
 einem oder mehreren extern gelieferten Importe abhängen.
 Exporte und Import haben jeweils einen Vertrag, der als Schnittstelle zwischen
 Exporten und Importen dient.
 Ein Behälter interagiert mit Katalogen um Zugriff zu den Ersatzteilen zu
 erhalten.
 Der Behälter selbst behebt die Abhängigkeiten des Ersatzteils und stellt
 seine Exporte der Aussenwelt zur Verfügung.
 
\end_layout

\begin_layout Standard
Sämtliche Exporte und Importe werden über Annotationen gesteuert und über
 Reflection
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Reflection"
description "Reflection (zu deutsch Reflexion oder Introspektion) ermöglich einem programm dass es seine eigene Strukur kennt und diese gegebenenfalls modifizieren kann."

\end_inset

 können zur Laufzeit diese Annotationen aus Assemblies gelesen werden
\begin_inset Foot
status open

\begin_layout Plain Layout
MEF ist Open Source und unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://mef.codeplex.com/
\end_layout

\end_inset

 zusammen mit Beispielen herunterzuladen.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MEF-Struktur"

\end_inset

 verdeutlich die Struktur von MEF.
 Dabei entspricht das Part jeweils einem Kryptosystem und wird in eine eigene
 Assembly kompiliert.
 Alle einzelnen Kryptosysteme implementieren dabei die Schnittstelle 
\emph on
ICryptoProvider
\emph default
 (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Kryptoalgorithmen"

\end_inset

) und werden mit 
\emph on
[Export(typeof(ICryptoProvider))] 
\emph default
sowohl 
\emph on
[CryptoAlgorithm(Algorithm = CryptoAlgorithm.SpecificCryptoAlgorithm)]
\emph default
 annotiert.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Graphics/MEFdiagram.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
MEF Struktur
\begin_inset CommandInset label
LatexCommand label
name "fig:MEF-Struktur"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Windows Communication Foundation
\begin_inset CommandInset label
LatexCommand label
name "sub:Windows-Communication-Foundation"

\end_inset


\end_layout

\begin_layout Standard
Zur Kommunikation zwischen den Clientapplikationen und der Serverapplikation
 wird die Windows Communication Foundation (kurz WCF) eingesetzt.
 WCF ist seit dem .NET Framework 3.0 ein Bestandteil des Frameworks und ist
 eine dienstorientierte Kommunikationsplattform für verteilte Anwendungen.
\end_layout

\begin_layout Standard
Durch WCF werden verschiedene Kommunikationstechnologeien wie DCOM, MSMQ
 oder Webservices unter einer einheitlichen Programmierschnittstelle zusammengef
asst.
 WCF wird hauptsächlich zur Entwicklung von Serviceorientierten Architekturen
 (SOA) verwendet.
 Dabei abstrahiert WCF das Konzept des Endpunkts durch eine Trennung in
 Address, Binding und Contract.
 Die Addresse (Address) ist eine URI, die den Ort des Dienstes beschreibt
 und somit seine Erreichbarkeit für Dienstkonsumenten kennzeichnet.
 Die Anbindung (Binding) beschreibt die Art der Kommunikation, worunter
 unter anderem die Merkmale der Kodierung des Protokolls fallen.
 Der Vertrag (Contract) stellt die Dienstdefinition, insbesondere die zur
 Verfügung gestellten Methoden, dar.
\end_layout

\begin_layout Standard
Alle Methoden, welche die Serverapplikation von YAEM zur Verfügung stellt,
 werden über die Schnittstellen IUserService und IMessagingService definiert
 (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:IUserService"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:IMessagingService"

\end_inset

).
 Die Serverapplikation implementiert diese beiden Schnittstellen und 
\end_layout

\begin_layout Standard

\noun on
[WCF erklären, wofür braucht man WCF']
\end_layout

\begin_layout Subsubsection
Bindings
\begin_inset CommandInset label
LatexCommand label
name "sub:Bindings"

\end_inset


\end_layout

\begin_layout Standard

\noun on
[Verschiedene Bindings auflisten und vergleichen, Details zu WsHttpDualBinding
 auflisten, Vorteile und Nachteile]
\end_layout

\begin_layout Subsubsection
Callbacks über NetHttpDualBinding
\begin_inset CommandInset label
LatexCommand label
name "sub:Callbacks-über-NetHttpDualBindin"

\end_inset


\end_layout

\begin_layout Standard

\noun on
[Delegates erklären, Mechanismsu von Callbacks über WsHttpDualBinding erklären]
\end_layout

\begin_layout Subsection
Windows Presentation Foundation
\begin_inset CommandInset label
LatexCommand label
name "sub:Windows-Presentation-Foundation"

\end_inset


\end_layout

\begin_layout Standard
Die Windows Presentation Foundation (kurz WPF) ist ein Framework zu Erstellung
 von grafischen Benutzeroberflächen für Windows-basierte Applikationen,
 das in 2006 zusammen mit dem .NET Framework 3.0 auf den Markt gekommen ist.
 WPF versucht, ein konsistentes Programmiermodell für die Erstellung von
 Anwendungen zu bieten und lieferte eine Trennung zwischen der Benutzeroberfläch
e und der Businesslogik.
 
\end_layout

\begin_layout Standard
WPF bentutzt Extensible Markup Language (XAML), ein XML-Derivat, um verschiedene
 UI-Elemente zu definierten und miteienander zu verküpfen.
 WPF Applikationen sowohl als eigenständige Programme sowie innerhalb einer
 Website als eingebettetes Objekt verteilt werden.
 WPF kombiniert UIs, 2D Grafiken, 3D Grafiken, Dokumente und Multimediaobjekte
 in einem einzigen Framework Diese Elemente können miteinander verknüpft
 werden und unterschiedliche Zustände aufgrund der anzuzeigenden Daten annehmen.
 Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Hauptfunktionalitäten-von-WPF"

\end_inset

 zeigt die Hauptfunktionalitäten von WPF.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/wpfMainFeatures.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Hauptfunktionalitäten von WPF (aus
\begin_inset CommandInset citation
LatexCommand cite
key "Moser2012"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:Hauptfunktionalitäten-von-WPF"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vor WPF wurden die meisten Desktopanwendungen für Windowsbasierte Systeme
 mit Windows Forms entwickelt.
 Dabei ist Windows Forms ein Wrapper für die Windows-API in Managed Code.
 WPF basiert nicht mehr auf der Windows-API sondern zeichnet die Benutzerflöäche
 selbst.
 Dadurch ist eine bessere Unterstüztung von Templates gegeben und auf längere
 Sicht eine erhöhte Portierbarkeit.
 Ausserdem ist WPF hardwarebeschleunigt, nutzt also den Prozessor der 3D-Grafikk
arte, eine Ressource die insbesondere im normalen Alltagsgebrauch von Windows
 brachliegt.
\end_layout

\begin_layout Standard
WPF ist im Moment die Referenztechnologie zur Entwicklung von Windowsbasierten
 Clientapplikationen.
 Aus diesem Grund wird es für die YAEM Desktopapplikation als UI-Framework
 verwendet.
\end_layout

\begin_layout Subsubsection
Model View ViewModel
\begin_inset CommandInset label
LatexCommand label
name "sub:Model-View-ViewModel"

\end_inset


\end_layout

\begin_layout Standard
Einer der grossen Vorteile von WPF ist die Trennung von Logik und Präsentation.
 Dies kann über das Architekturmuster MVVM erreicht werden, das eine Spezialisie
rung des Entwurfsmusters Presentation Model von Martin Fowler ist (siehe
 
\begin_inset CommandInset citation
LatexCommand cite
key "Fowler2004"

\end_inset

).
 MVVM basiert zum grössten Teil auf Model View Controller (MVC), und ist
 auf moderne UI-Entwicklungsplattformen wie WPF oder Silverlight ausgelegt
 bei denen es eine Rollentrennung zwischen einem UI-Entwickluer und einem
 Back-End-Entwickler gibt.
 Das View-Model von MVVM ist dafür verantwortlich, die Datenbojekte des
 Modells derart blosszulegen, dass sie einfach verwaltet und benutzt werden
 können.
 
\end_layout

\begin_layout Standard
MVVM wurde entworfen, um mittels der spezifischen Funktionen in WPF durch
 Entfernung praktisch alles Code-Behind von der View-Schicht eine bessere
 Trennung der View-Schicht vom Rest zu ermöglichen.
 Statt View-Code zu schreiben, kann ein Designer die XAML verwenden und
 Bindungen zum ViewModel erzeugen, die durch Anwendungsentwickler geschrieben
 und gewartet werden.
 Diese Rollentrennung erlaubt es Designern, eher einen Fokus auf die UX-Anforder
ungen zu legen, als auf Programmierung oder Geschäftslogik, wodurch die
 Schichten einer Anwendung typischerweise in mehreren Arbeitsgruppen entwickelt
 werden können.
\end_layout

\begin_layout Standard
Das MVVM-Muster beeinhaltet die folgenden Elemente (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Smith2009"

\end_inset

):
\end_layout

\begin_layout Itemize
Model: wie im klassischen MVC-Muster bezieht sich das Modell entweder auf
 ein Objektmodell das den realen Zustandsinhalt repräsentiert (objektorientierte
r Ansatz) oder die Datenzugriffsschicht welche diesen Inhalt repräsentiert
 (datenzentrischer Ansatz).
 
\end_layout

\begin_layout Itemize
View: wie im klassischen MVC-Muster bezieht sich die View auf alle Elemente
 die durch die GUI angezeigt werden, etwa Schaltflächen, Fenster, Grafiken,
 und andere Steuerelemente.
 
\end_layout

\begin_layout Itemize
ViewModel: das ViewModel ist ein “Modell der View” was bedeutet, dass es
 eine Abstraktion der View ist, die auch der Datenbindung zwischen View
 und Model dient.
 Es könnte betrachtet werden als ein spezieller Aspekt eines Controllers
 (im MVC-Muster) für die Datenbindung und -konvertierung, der Information
 vom Model zu solcher für die View konvertiert und Befehle von der View
 zum Model reicht.
 Das ViewModel legt öffentliche Properties, Befehle und Abstraktionen bloß.
 Das ViewModel kann mit einem konzeptionellen Zustand der Daten verglichen
 werden, im Gegensatz zum realen Zustand der Daten im Model.
\end_layout

\begin_layout Standard
Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Beispielimplementierung-von-MVVM"

\end_inset

 zeigt eine beispielhafte Implementierung von 
\begin_inset CommandInset citation
LatexCommand cite
key "Smith2009"

\end_inset

 des MVVM-Musters mit allen wichtigen Elementen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/MVVM.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Beispielimplementierung von MVVM (aus 
\begin_inset CommandInset citation
LatexCommand cite
key "Smith2009"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:Beispielimplementierung-von-MVVM"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Silverlight
\begin_inset CommandInset label
LatexCommand label
name "sub:Silverlight"

\end_inset


\end_layout

\begin_layout Standard
2007 vorgestellt ist Silverlight ein Applikationsframework zur Entwicklung
 von Rich Internet Applications (RIA).
 Silverlgiht Applikationen werden dabei innerhalb eines Browserplugins ausgeführ
t, das für für eine Vielzahl von Browsern und Betriebssystemen existiert.
 Silverlight benutzt ein ähnliches Grafiksysteme wie WPF (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Windows-Presentation-Foundation"

\end_inset

) und integriert Multimedia, Grafiken, Animationen und Interaktivität in
 eine einzige Laufzeitumgebung.
 Silverlight dient ausserdem als Entwicklungsplattform für Windows Phone.
\end_layout

\begin_layout Standard
Wie in WPF wird auch in Silverlight XAML als Beschreibungssprache von Benutzerob
erflächen benutzt allerdings in einem verminderten Umfang.
 Da Silverlightapplikationen gleichzeitig im Browser und auf einem Winows
 Phone läuft wurde es als UI-Framework für die YAEM Mobile- und Web-Clientapplik
ationen ausgewählt.
 Mit minimalem Aufwand können für zwei unterschiedliche Plattformen Anwendungen
 entwickelt werden.
\end_layout

\begin_layout Subsection
Mock-Objekte
\end_layout

\begin_layout Standard
Bei Unit-Tests möchte man möglichst nur eine kleine Einheit isoliert testen.
 Meistens stehen jedoch Abhängikeiten zu anderen Einheiten diesem Vorhaben
 im Weg, die man für diesen Test ignorieren möchte.
 Soll die Interaktion eines Objektes mit seiner Umgebung überprüft werden,
 muss vor dem eigentlichen Test die Umgebung nachgebildet werden.
 Das kann umständlich, zeitaufwändig, oder gar nur eingeschränkt oder überhaupt
 nicht möglich sein (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Freeman2009"

\end_inset

).
 Aus diesem Grund kann man Mock-Objekte, auch 
\begin_inset Quotes eld
\end_inset

Dummy
\begin_inset Quotes erd
\end_inset

-Objekte oder Attrappen genannt, einsetzen.
 Diese dienen als Platzhalter für echte Objekte und Abhängigkeiten.
 
\end_layout

\begin_layout Standard
Mock-Objekte (in diesem Fall mittels des Frameworks Moq
\begin_inset Foot
status open

\begin_layout Plain Layout
Details zu Moq sind unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/p/moq/
\end_layout

\end_inset

 zu finden.
\end_layout

\end_inset

) implementieren Schnittstellen, über die das zu testende Objekt auf seine
 Umgebung zugreift.
 Sie stellen sicher, dass die erwarteten Methodenaufrufe vollständig, mit
 den korrekten Parametern und in der erwarteten Reihenfolge durchgeführt
 werden.
 Das Mock-Objekt liefert keine Echtdaten zurück, sondern vorher zum Testfall
 passend festgelegte Werte.
\end_layout

\begin_layout Standard
Durch den Einsatz von Mock-Objekten kann man einzelne Softwarteile testen
 ohne dass diese die Aussmase von Integrationstests annehmen.
\end_layout

\begin_layout Section
Kryptosysteme
\begin_inset CommandInset label
LatexCommand label
name "sec:Kryptosysteme"

\end_inset


\end_layout

\begin_layout Standard
Ein Kryptosystem besteht aus einem Algorithmus der eine Eingabemenge parameterge
steuert in eine Ausgabemenge transformiert.
 Es dient zur Geheimhaltung von übertragenen und gespeicherten Informationen
 gegenüber Dritten.
 Geheimhaltung wird dabei durch Transformation der Nachricht erzielt, so
 dass die transformierte Nachricht für Dritte keine konstruierbaren semantischen
, statistischen oder strukturellen Korrelationen zum Original mehr aufweist
 (nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Geiselmann2009"

\end_inset

).
\end_layout

\begin_layout Standard
Ein symmetrisches Kryptosystem ist ein Kryptosystem, bei welchem im Gegensatz
 zu einem asymmetrischen Kryptosystem beide Teilnehmer den gleichen Schlüssel
 verwenden.
 
\end_layout

\begin_layout Standard
Ein asymmetrisches Kryptosystem (oder Public-Key-Kryptosystem) hingegen
 ist ein kryptographisches Verfahren, bei dem die kommunizierenden Parteien
 keinen gemeinsamen Schlüssel kennen müssen.
 Ein Benutzer erzeugt hier ein Schlüsselpaar, das aus einem geheimen Teil
 (privater Schlüssel) und einem nicht geheimen Teil (öffentlicher Schlüssel)
 besteht.
 Der öffentliche Schlüssel ermöglicht es jedem, Daten für den Inhaber des
 privaten Schlüssels zu verschlüsseln, dessen digitale Signaturen zu prüfen
 oder ihn zu authentifizieren.
 Der private Schlüssel ermöglicht es seinem Inhaber, mit dem öffentlichen
 Schlüssel verschlüsselte Daten zu entschlüsseln, digitale Signaturen zu
 erzeugen oder sich zu authentisieren.
\end_layout

\begin_layout Subsection
Symmetrische Kryptosysteme
\begin_inset CommandInset label
LatexCommand label
name "sub:Symmetrische-Kryptosysteme"

\end_inset


\end_layout

\begin_layout Standard
Da der Fokus dieses Projekts nicht auf der Implementierung von Kryptosystemen
 liegt werden im Moment nur symmetrische Kryptosysteme unterstützt, die
 einfach zu handhaben sind, da zum Ent- und Verschlüsseln derselbe Schlüssel
 benutzt wird.
\end_layout

\begin_layout Standard
Man teilt die symmetrischen Verfahren in Blockchiffren-basierte Verfahren
 und Stromchiffren auf.
 Mit Stromchiffren wird der Klartext Zeichen für Zeichen verschlüsselt,
 um den Geheimtext zu erhalten, bzw.
 entschlüsselt, um den Klartext zu erhalten.
 Eine Blockchiffre arbeitet mit einer festen Blockgröße und ver- bzw.
 entschlüsselt mehrere Zeichen in einem Schritt.
 Um damit Texte beliebiger Länge verschlüsseln zu können, sind Betriebmodi
 festgelegt, die bestimmen, wie die Blockchiffre verwendet wird.
\end_layout

\begin_layout Standard
Im Rahmen dieses Projekts werden drei Algorithmen mittels der Schnittstelle
 ICryptoProvider (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:YAEM.Crypto"

\end_inset

) implementiert, die allesamt aus dem System.Security.Cryptography Namespace
 des .NET Frameworks stammen und in den folgenden Unterkapiteln kurz beschrieben
 werden.
 
\end_layout

\begin_layout Subsubsection
Advanced Encryption Standard
\end_layout

\begin_layout Standard
Der Advanced Encryption Standard (AES) ist ein symmetrisches Kryptosystem,
 das als Nachfolger für DES und TripleDES im Oktober 2000 vom National Institute
 of Standards and Technology (NIST) als Standard bekanntgegeben wurde.
 
\end_layout

\begin_layout Standard
Der AES ist ist eine Blockchiffre, wobei sie auf einer Verflechtung von
 Substitutions- und Permutationsvorgängen basiert, was bedeutet, dass eine
 Reihe mathematischer Vorgänge miteinander verbunden werden um Daten höchstmögli
ch zu modifizieren bzw.
 zu verschlüsseln.
 
\end_layout

\begin_layout Subsubsection
Rijndael
\end_layout

\begin_layout Standard
Nach
\begin_inset CommandInset citation
LatexCommand cite
key "Shawnfa2006"

\end_inset

 ist der Rijndael Algorithmus identisch mit demjenigen des AES, allerdings
 können bei Rijndael die Block- und Schlüsselgrössen unabhängig voneinander
 aus 128, 160, 192, 224 oder 256 Bits gewählt werden.
 AES legt die Blockgrösse immer auf 128 bits fest, die Schlüsselgrösse kann
 hingegen entweder 128, 192 oder 256 Bits.
\end_layout

\begin_layout Subsubsection
TripleDES
\end_layout

\begin_layout Standard
Der Triple-DES Algorithmus ist ein Nachfolger des DES-Algorithmus und wurde
 im Jahr 1976 als offizieller Standard der US-Regierung bestätigt.
 Im Gegensatz zum DES mit seiner verwendeten Schlüssellänge von 56 Bits
 (die heute als nicht ausreichend sicher betrachtet wird) kann die Schlüsselläng
e durch Mehrfachfachverwendung des DES einfach vergrössert werden.
\end_layout

\begin_layout Standard
Der DES verwendet eine Blockchiffre, die den Klartext in 64 Bit-Blöcke unterteil
t und verschlüsselt.
 Triple-DES verwendet drei 64 Bit Schlüssel, die dadurch eine gesamte Schlüssell
äge von 192 Bit ergeben.
 Dabei wird die erste Verschlüsselung mit dem zweiten Schlüssel verschlüsselt
 und der resultierende Kryptotext erneut mit dem dritten Schlüssel verschlüsselt.
\end_layout

\begin_layout Subsection
Unterstützung asymmetrischer Kryptosysteme
\end_layout

\begin_layout Standard
Wie schon in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Symmetrische-Kryptosysteme"

\end_inset

 erwähnt, unterstützt YAEM.Crypto im Moment nur symmetrische Kryptosysteme,
 da die Schnittstelle ICryptoProvider darauf basiert, das derselbe Schlüssel
 zum Ver- und Entschlüsseln der Nutzdaten verwendet wird.
 
\end_layout

\begin_layout Standard
Auch bei asymmetrischen Verfahren ist der Austausch von Schlüsseln wichtig.
 Muss man den öffentlichen Schlüssel doch zugänglich machen damit er zur
 Verschlüsselung benutzt werden kann und den dazu passende private irgendwo
 sicher verwahren um nicht das gesamte Konzept auszuhebeln.
 Würde YAEM auch asymmetrische Kryptosysteme unterstützen müssen, so müsste
 neben ICryptoProvider ein zweites Interface mit dem Namen IAsymmetricCryptoProv
ider definiert werden, welche anstelle der Properties Key und InitialzationVecto
r eine Möglichkeit besitzt den öffentlichen Schlüssel aus dem installierten
 Zertifikat auf dem ausgeführten Rechner auszulesen
\begin_inset Foot
status open

\begin_layout Plain Layout
Dazu findet sich ein Beispiel in der MSDN: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.security.cryptography.asymmetricalgori
thm.aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

.
 Der private Schlüssel wird dabei in dem dafür vorgesehenen Container CspParamet
ers
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.security.cryptography.cspparameters.asp
x
\end_layout

\end_inset

.
\end_layout

\end_inset

 abgelegt, der ein Wrapper von Microsofts Cryptography API (CAPI) darstellt.
\end_layout

\begin_layout Section
Komponenten im Detail
\begin_inset CommandInset label
LatexCommand label
name "sec:Komponenten-im-Detail"

\end_inset


\end_layout

\begin_layout Standard
Dieses Kapitel beschreibt im Detail die Implementierung der einzelnen Komponente
n.
 Dabei wird auf Besonderheiten in der Architektur der Komponenten hingewiesen
 und es wird ein gesamter technischer Überblick über die Umsetzung des Konzepts
 gegeben.
\end_layout

\begin_layout Standard
Zur besseren Orientierung innerhalb des Systems wird auf die Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visual-Studio-Solution"

\end_inset

 der Visual Studio-Solution verwiesen.
 Die Namensgebung der Unterkapitel hält sich dabei an die Namespaces der
 Projekte.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/SolutionOverview.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Visual Studio-Solution
\begin_inset CommandInset label
LatexCommand label
name "fig:Visual-Studio-Solution"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
YAEM.Domain
\begin_inset CommandInset label
LatexCommand label
name "sub:YAEM.Domain"

\end_inset


\end_layout

\begin_layout Standard
Die Assembly YAEM.Domain enthält alle Klassen, die über die Webservice Schnittste
llen IUserService und IMessagingService übertragen werden (Inhalt des Namespaces
 siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Domänenmodell"

\end_inset

).
 Alle Klassen sind mit [DataContract]
\begin_inset Foot
status open

\begin_layout Plain Layout
Ein DataContract ist eine formale Vereinbarung zwischen einem Dienst und
 einem Client, in dem die auszutauschenden Daten abstrakt beschrieben werden.
 Mehr Informationen zu DataContracts sind in der MSDN Library unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/ms733127.aspx
\end_layout

\end_inset

 zu finden.
\end_layout

\end_inset

 annotiert, da sie serialisiert über den WCF Webservice übertragen werden
 sollen.
 Die Objekte Message, Session und User leiten von ObjectBase ab, welches
 neben der Schlüsselverwaltung der einzelnen Instanzen auch die Schnittselle
 INotifyPropertyChanged implementiert, welche WPF und Silverlight Datenbindings
 über geänderte Daten benachrichtigt.
\end_layout

\begin_layout Standard
Da dieser Namespace auch in Silverlight verfügbar sein soll, wird eine Kopie
 als Silverlight-Library erstellt, in welcher alle Klassen aus YAEM.Domain
 als Link im Projekt eingefügt sind und danach als eigenständige Assembly
 (hier YAEM.Domain.SL) kompiliert werden (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "Betz2008"

\end_inset

).
\end_layout

\begin_layout Subsection
YAEM.Contracts
\end_layout

\begin_layout Standard
Dieses Assembly enthält nur die ServiceContracts
\begin_inset Foot
status open

\begin_layout Plain Layout
Ein ServiceContract beschreibt eine Schnittstelle oder Klasse die einen
 Servicevertrag einer Applikation definiert.
 Siehe MSDN 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.
aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

IUserService und IMessagingService, die von der Serverapplikation implementiert
 als Webservice zur Verfügung gestellt werden (Details zu den einzelnen
 ServiceOperations sind in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Service-Contracts"

\end_inset

 zu finden).
 Zusätzlich wird auch die ServiceContract IServiceCallback in diesem Namespace
 definiert, der von den Clientapplikationen implementiert werden muss, wenn
 sie die beiden Services IUserService und IMessagingService nutzen wollen,
 da diese mit [ServiceContract(CallbackContract = typeof(IServiceCallback))]
 annotiert sind, was den Webservice-Konsumenten dazu zwingt, den CallbackContrac
t zu implementieren.
\end_layout

\begin_layout Standard
Alle in den Schnittsellen übertragenen Datenobjekte sind entweder primitve
 Datentypen oder stammen aus YAEM.Domain (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:YAEM.Domain"

\end_inset

).
\end_layout

\begin_layout Subsection
YAEM.Server
\end_layout

\begin_layout Standard
Die YAEM.Server-Applikation dient als Servicehost der beiden Webservices
 IUserService und IMessagingService.
 Ein WCF Service kann entweder im Internet Information Server (IIS) gehosted
 werden oder als Selfhosting Applikation z.B.
 innerhalb einer Konsolenanwendung.
 Da insbesondere der geringere Konfigurationsaufwand für Selfhosted Services
 spricht, wurde die IIS-hosted Lösung verworfen.
\end_layout

\begin_layout Standard
Die Konsoleanpplikation zeigt direkt ein Protokoll aller aufgerufenen Methoden
 der Webservices dar.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/Server.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Serverapplikation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
YAEM.Crypto
\begin_inset CommandInset label
LatexCommand label
name "sub:YAEM.Crypto"

\end_inset


\end_layout

\begin_layout Standard
Die Infrastruktur für die Implementierungen der Kryptosysteme findet sich
 im Assembly YAEM.Crypto.
 Das Interface ICryptoProvider stellt dabei alle Funktionalitäten zur Verfügung,
 die ein symmetrisches Kryptosystem zur Ver- und Entschlüsselung von Byte-Arrays
 benötigt.
\end_layout

\begin_layout Standard
Zusätzlich zu ICryptoProvider enthält das Projekt auch noch das ExportAttribute
\begin_inset Foot
status open

\begin_layout Plain Layout
ExportAttribute spezifiziert einen Typ, ein Property oder eine Methode die
 einen Export zur Verfügung stellen.
 Mehr Informationen in der MSDN unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.exportattri
bute.aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

 CryptoAlgorithmAttribute, das für MEF benötigt wird um zur Laufzeit die
 vorhanden Kryptoalgorithmen identifizieren zu können.
\end_layout

\begin_layout Subsubsection
YAEM.Crypto.Aes
\end_layout

\begin_layout Standard
YAEM.Crypto.Aes stellt die Implementierung der Schnittstelle ICryptoProvider
 (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:YAEM.Crypto"

\end_inset

) mit dem Kryptosystem Advanced Encryption Standard (AES) zur Verfügung.
 Der AesCryptoProvider ist dabei mit [CryptoAlgorithm(Algorithm = CryptoAlgorith
m.Aes)] annotiert, so dass beim Importieren der Assembly das Kryptosystem
 auch im UI identifiziert werden kann.
\end_layout

\begin_layout Standard
Der AesCryptoProvider ist ein Wrapper für den AesCryptoServiceProvider
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe MSDN 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.security.cryptography.aescryptoservice
provider.aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

 aus dem Namespace System.Security.Cryptography 
\begin_inset Foot
status open

\begin_layout Plain Layout
Sämtliche Inhalte des Namespaces System.Security.Cryptography finden sich
 in der MSDN Library unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.security.cryptography.aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

, also Microsofts Refrenzimplementierung von AES.
 Der AesCryptoServiceProvider implementiert den AES über die Cryptographic
 Application Programming Interfaces (CAPI).
\end_layout

\begin_layout Subsubsection
YAEM.Crypto.Rijndael
\end_layout

\begin_layout Standard
Analog der Implementierung des AES enthält der Namespace YAEM.Crypto.Rijndael
 die Implementierung des Rijndael Kryptosystems.
 Konkret ist der RijndaelCryptoProvider ein Wrapper von RijndaelManaged
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged
\end_layout

\end_inset

.
\end_layout

\end_inset

 der den Rijndael Algorithmus implementiert.
 Zusätzlich ist der RijndaelCryptoProvider mit [CryptoAlgorithm(Algorithm
 = CryptoAlgorithm.Rijndael)] annotiert.
\end_layout

\begin_layout Subsubsection
YAEM.Crypto.TripleDES
\end_layout

\begin_layout Standard
Der TripleDESCryptoProvider des YAEM.Crypto.TripleDES Namespaces implementiert
 auch ICryptoProvider und stellt einen Wrapper für TripleDESCryptoServiceProvide
r
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/system.security.cryptography.tripledescryptos
erviceprovider.aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

 aus dem System.Security.Cryptography Namespace bereit.
 Er implementiert das symmetrische Kryptosystem TripleDES und ist mit [CryptoAlg
orithm(Algorithm = CryptoAlgorithm.TripleDES)] annotiert.
\end_layout

\begin_layout Subsection
YAEM.TestClient
\end_layout

\begin_layout Standard
Die erste entwickelte Clientapplikation, die nicht Teil der Aufgabenstellung
 war, ist eine in Windows Forms entwickelte Desktopapplikation für Windows-basie
rte Systeme.
 Die Applikation zeigt zusätzliche Debug-Informationen an, die in den Clientappl
ikationen für den Endnutzer nicht ersichtlich sind wie die Guids der Benutzer
 und Nachrichten sowie weitere Informationen zu den übertragenen Daten.
 Der YAEM.TestClient hält sich somit auch nicht an die Mockups (siehe Kapitel
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Mockups"

\end_inset

) da er ausserhalb der definierten Anforderungen implementiert wurde.
\end_layout

\begin_layout Standard
Der Gesprächsdialog (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GesprächsdialogTestClient"

\end_inset

) enthält zusätzlich zum Gesprächsverlauf auf der rechten Seite des Dialogfenste
rs die Möglichkeit dem Gespräch beizutreten sowie Anzeige der dem Gespräch
 beigetretenen Benutzer.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/TestClient-MainForm.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
GesprächsdialogTestClient
\begin_inset CommandInset label
LatexCommand label
name "fig:GesprächsdialogTestClient"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wählt der Benutzer der Applikation eine Kryptosystem aus, für das noch kein
 Schlüssel vorliegt, so wird der Schlüsselgenerierungsdialog (siehe Abbildung
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schlüsselgenerierungsdialog-Test"

\end_inset

) geöffnet, der einen zufälligen generierten Schlüssel enthält.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/TestClient-GenerateKey.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Schlüsselgenerierungsdialog TestClient
\begin_inset CommandInset label
LatexCommand label
name "fig:Schlüsselgenerierungsdialog-Test"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
YAEM.DesktopClient
\end_layout

\begin_layout Standard
Der YAEM.DesktopClient hält sich hingegen an die Anforderungen der Mockups
 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Mockups"

\end_inset

) und implementiert diese in einer WPF Applikation unter Berücksichtigung
 des MVVM-Entwurfsmusters (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Model-View-ViewModel"

\end_inset

).
\end_layout

\begin_layout Standard
Die Applikation startet mit dem Anzeigen des Verbindungdialogs (siehe Abbildung
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Verbindungsdialog-DesktopClient"

\end_inset

) bei welchem man den gewünschten Benutzernamen eingeben kann.
 Nach Klick auf den 
\begin_inset Quotes eld
\end_inset

Join
\begin_inset Quotes erd
\end_inset

-Button wird der Dialog geschlossen und es öffnet sich der Gesprächsdialog
 (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Gesprächsdialog-DesktopClient"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/DesktopClient-Connect.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Verbindungsdialog DesktopClient
\begin_inset CommandInset label
LatexCommand label
name "fig:Verbindungsdialog-DesktopClient"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das MessagingViewModel, das an das MessagingWindow gebunden ist, implementiert
 die Schnittstelle IServiceCallback (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:IServiceCallback"

\end_inset

), da das ViewModel die Webservices der Serverapplikation benutzen.
 Bei erfolgreichem Beitreten des Gesprächs wird der Serverapplikation der
 Callbackchannel der Clientapplikation mitgeteilt, so dass diese beim Eintreffen
 neuer Nachrichten oder bei Veränderungen der angemeldeten Benutzer entsprechend
 reagieren kann.
\end_layout

\begin_layout Standard
Schliesst man das MessagingWindow, so wird der Benutzer vom Webserver abgemeldet
 und der Callbackchannel wird geschlossen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/DesktopClient-MainForm.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Gesprächsdialog DesktopClient
\begin_inset CommandInset label
LatexCommand label
name "fig:Gesprächsdialog-DesktopClient"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wählt der Benutzer der Applikation eine Kryptosystem aus, für das noch kein
 Schlüssel vorliegt, so wird der Schlüsselgenerierungsdialog (siehe Abbildung
 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Schlüsselgenerierungsdialog-Desk"

\end_inset

) geöffnet, der einen zufälligen generierten Schlüssel enthält.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Graphics/DesktopClient-GenerateKey.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Schlüsselgenerierungsdialog DesktopClient
\begin_inset CommandInset label
LatexCommand label
name "fig:Schlüsselgenerierungsdialog-Desk"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
YAEM.MobileClient
\end_layout

\begin_layout Standard
Zur Entwicklung des MobileClients der unter Windows Phone 7 verteilt werden
 wird Silverlight (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Silverlight"

\end_inset

) benutzt.
 Schnell hat sich gezeigt, dass Silverlight mit dem in der Konzeptphase
 ausgewählten WsDualHttpBinding nicht kompatibel ist und aufgrund der fehlenden
 DuplexClientBase (genaures siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Aufgetretene-Probleme"

\end_inset

) es nicht möglich ist einen funktionsfähigen MobileClient zu entwickeln.
 Aus diesem Grund wird im Rahmen des Projekts auch kein MobileClient implementie
rt.
\end_layout

\begin_layout Subsection
Aufgetretene Probleme
\begin_inset CommandInset label
LatexCommand label
name "sub:Aufgetretene-Probleme"

\end_inset


\end_layout

\begin_layout Standard
Einer der ersten Schritte bei Applikationen, die Webservices konsumieren,
 ist das Hinzufügen der Servicerefenzen auf die Webservices im Visual Studio-Pro
jekt.
 Dadurch werden die im WSDL spezifizierten Datentypen als Code generiert
 sowie das Binding auf den Webservice in der konsumierenden Applikation
 hinzugefügt.
\end_layout

\begin_layout Standard
Es hat sich schnell gezeigt, dass Silverlight keine DuplexClientBase im
 System.ServiceModel Namespace besitzt und es dadurch nicht möglich ist über
 das WsDualHttpBinding von Silverlight eine Kommunikation zum WCF Webservice
 aufzubauen.
 Dadurch, das WsDualHttpBinding die Grundlage der Bereitstellung der Webservices
 in der Serverapplikation ist, ist es im Moment nicht möglich einen Silverlight-
Client zu schreiben
\begin_inset Foot
status open

\begin_layout Plain Layout
Die genauen Unterschiede zwischen dem Silverlight und WCF Stack finden sich
 in der MSDN unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/cc896571(VS.95).aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Möchte man trotzdem einen zweikanaligen Webservice im Zusammenspiel mit
 WCF entwickeln, so müsste man entweder auf das PollingDuplexHttpBinding
 oder NetTcpBinding auswechen.
 PollingDuplexHttpBinding ist exklusiv für Silverlight 5 verfügbar und ermöglich
t es dem konsumierenden Client in Silverlight in regelmässigen Zeitabständen
 beim Webservice nachzufragen, ob ein Callback existiert, für das eine Aktion
 in der Silverlightapplikation ausgeführt werden müsste.
 Da PollingDuplexHttpBinding im Moment jedoch nicht für WPF verfügbar ist,
 ist auch dieses Binding für das Projekt unbrauchbar.
 Die einzige wirkliche Alternative stellt das NetTcpBinding dar, das allerdings
 nicht über HTTP Daten austauscht sondern über TCP.
 Dadurch ginge der grosse Vorteil der Interopabilität verloren, da über
 TCP serialisierte Daten übertragen würden.
 
\end_layout

\begin_layout Chapter
Test
\begin_inset CommandInset label
LatexCommand label
name "chap:Test"

\end_inset


\end_layout

\begin_layout Standard
Die Überprüfung und Verifikation des Softwareprodukts zählt zu den wichtigsten
 Teilen der Softwareentwicklung.
 Insbesondere da in den letzten Jahre neue Methoden und Technologien auf
 den Markt gekommen sind, die diese diffizile und anspruchsvolle Arbeit
 dem Entwickler abgeben wird in diesem Kapitel insbesondere ein Basiswissen
 auf technischer Ebene vermittelt.
\end_layout

\begin_layout Standard
Unit-Tests als automatisierte Tests, die in Quellcode vom Softwareentwickler
 geschrieben werden, werden als Erstes vorgestellt.
 Anschliessend wird auf das Thema Akzeptanztest eingegangen, mit Hilfe deren
 Anforderungen an ein System mithilfe des Systems selbst getestet werden
 können.
\end_layout

\begin_layout Section
Unit-Tests
\begin_inset CommandInset label
LatexCommand label
name "sec:Unit-Tests"

\end_inset


\end_layout

\begin_layout Standard
Unit-Tests (auch Komponententests genannt) überprüfen, ob die von Entwicklern
 geschriebenen Komponenten so arbeiten, wie diese es beabsichtigen.
 Zur Qualitätssicherung eines Softwareprodukts wird eine sehr häufige Ausführung
 der Unit-Tests angestrebt.
 Das lässt sich nur erreichen, wenn die Tests vollständig automatisiert
 vorliegen, sie also selbst ein Programm sind, dessen Ausführung nicht mehr
 Aufwand als einen Knopfdruck erfordert.
 Insbesondere in der testgetriebenen Entwicklung (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Testgetriebene-Entwicklung"

\end_inset

) werden Unit-Tests auch als Regressionstests nach Refactoring verwendet.
 
\end_layout

\begin_layout Standard
Durch die Testgetriebene Entwicklung von YAEM werden alle implementierten
 Komponenten schon vorgängig mit Unit-Tests abgedeckt.
 Die Unit-Tests sind dabei in einem eigenen Visual Studio-Projekt innerhalb
 der Solution untergebracht und werden nicht zusammen mit dem produktiven
 Code deployed.
\end_layout

\begin_layout Subsection
Testabdeckung
\end_layout

\begin_layout Standard
Eine Kenngrösse zur Qualitätssicherung und zur Steigerung von Softwarequalität
 stellt die Testabdeckung dar.
 Die Testabdeckung bezeichnet die prozentuale Anzahl des produktiven Quellcodes,
 der über einen automatisierten Unit-Test abgedeckt ist, im Vergleich zur
 gesamten Anzahl des Quellcodes.
 Insbesondere hift die Testabdeckung bei der Identifizierung von einzelnen
 Bereichen im Quellcode die potentiell fehleranfällig (da ungetestet bzw.
 ungenügend getestet) sind.
\end_layout

\begin_layout Standard
Wie in Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Testabdeckung"

\end_inset

 ersichtlich ist, beträgt die Testabdeckung der einzelnen Namespaces jeweils
 mehr als 80%, die laut Aufgabenstellung gefordert sind.
 Die totale Testabdeckung des Projekts YAEM beträgt 94.13%.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Namespace
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Codeblöcke
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Getestet (Blöcke)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Getestet (% Blöcke)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.DesktopClient
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
656
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
612
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
93.29%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.Crypto
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.Crypto.Aes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.Crypto.Rijndael
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.Crypto.TripleDES
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
47
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.Domain
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
71
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
85.91%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.Server
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
157
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
149
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
94.90%
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YAEM.Contracts
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100%
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Testabdeckung
\begin_inset CommandInset label
LatexCommand label
name "tab:Testabdeckung"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Akzeptanztests
\end_layout

\begin_layout Standard
Mithilfe von Akzeptanztest
\begin_inset Foot
status open

\begin_layout Plain Layout
auch Abnahmetests oder User Acceptance Tests (UAT)
\end_layout

\end_inset

 geprüft, ob die Software die funktionalen Erwartungen und Anforderungen
 im Gebrauch erfüllt.
 Dabei werden Akzeptanztests als Black-Box-Tests gegen die einzelnen Use
 Cases der funktionalen Anforderungen (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Use-Case-Spezifikationen"

\end_inset

) geprüft, das heisst der Test hat keine Kentnisse über die innere Funktionsweis
e des Systems und imitiert den Benutzer der Applikation.
\end_layout

\begin_layout Standard
In diesem Projekt werden zur Entwicklung der Akzeptanztests Coded UI Tests
 verwendet.
 Coded UI Tests
\begin_inset Foot
status open

\begin_layout Plain Layout
Mehr zu Coded UI Tests in der MSDN Library unter 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://msdn.microsoft.com/en-us/library/dd286681.aspx
\end_layout

\end_inset

.
\end_layout

\end_inset

 sind auomatisierte Tests die auf der Benutzerfläche festgelegte Aktionen
 als Skript ausführen lassen.
 Ein Coded UI Test kann ausserdem auf einzelnen UI-Elementen Erwartungen
 definieren (z.B.
 nach Klick auf den 
\begin_inset Quotes eld
\end_inset

Senden
\begin_inset Quotes erd
\end_inset

-Button muss die Nachricht-Textbox leer sein).
\end_layout

\begin_layout Standard
Die Anforderungen in den Use Cases UC1 bis UC4 aus den Use-Case-Spezifikationen
 werden als Coded UI Tests ausformuliert und im Visual Studio-Projekt YAEM.Accept
anceTests abgelegt.
 Beim Ausführen eines der Coded UI Tests wird automatisch die Serverapplikation
 sowie die Clientapplikation gestartet und der jeweilige Testfall wird als
 Skript abgearbeitet.
 Je nach Use Case sind unterschiedliche Eingaben sowie Erwartungen definiert.
 Werden diese nicht erfüllt (z.B.
 wird nach dem Senden einer Nachricht eines Benutzers bei einem anderen
 Benutzer keine neue Nachricht eingegangen) so wird eine Exception geworfen
 und der Test schlägt fehl.
\end_layout

\begin_layout Standard
Die Ergebnisse der Akzeptanztests sind in Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Akzeptantests"

\end_inset

 ersichtlich.
 Alle Anforderungen sind somit erfüllt und die Akzeptanztests können als
 bestanden betrachtet werden.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezeichner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use-Case
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Testklasse
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Testergebnis
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gespräch beitreten
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC1Tests
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bestanden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gespräch verlassen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC2Tests
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bestanden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC3
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht senden
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC3Tests
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bestanden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachricht empfangen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UC4Tests
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bestanden
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Akzeptantests
\begin_inset CommandInset label
LatexCommand label
name "tab:Akzeptantests"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Fazit
\end_layout

\begin_layout Standard
Die Semesterarbeit stellt ein spannendes und lehrreiches Projekt dar, das
 insbesondere als Vorbereitung für die Bachelorarbeit hilfreich ist.
 Das sorgfältige Erfassen der Aufgabenstellung und der zu erwartenden Resultate
 stellen dabei ein zentrales Element der Projektarbeit dar und es ist von
 Vorteil genau abzugwägen, was genau in der Aufgabenstellung erfasst sein
 soll und was geliefert werden soll.
\end_layout

\begin_layout Standard
Die Verwendung des Wassserfallmodells für dieses Projekt hat sich als ideal
 herausgestellt da so nach jeder Phase die abzugebenden Dokumente und Resultate
 fertiggestellt vorlagen und erst dann zur nächsten Phase vorgegangen werden
 konnte.
 Auch hat es sich bezahlt gemacht relativ viel Zeit in die Erarbeitung des
 Konzepts zu investieren da dadurch bei Erreichen der Implementierungsphase
 direkt mit der Entwicklung der einzlenen Komponenten begonnen werden konnte
 und zwischen den Komponenten keine Inkonsistenzen entstanden sind.
\end_layout

\begin_layout Standard
Gegenüber der Aufgabenstellung fehlen in der Implementierung bzw.
 der Dokumentation der Semestararbeit der MobileClient (siehe dazu 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Aufgetretene-Probleme"

\end_inset

) sowie der Vergleich der Funktionen und Performance mit Konkurrenzprodukten,
 da YAEM sich noch im Prototypenstadium befindet und die verlangten 120
 Stunden Aufwand schon überschritten waren.
 Zudem wurden anstatt Caesar und Blowfish die Kryptosysteme AES und Rijndael
 implementiert, wie im Kapitel Implementierung ausführlich beschrieben wurde
 (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Kryptosysteme"

\end_inset

).
\end_layout

\begin_layout Section
Aufwand Seminararbeit
\end_layout

\begin_layout Standard
In Tabelle 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Geplanter/effektiver-Aufwand"

\end_inset

 wird der geplante Aufwand mit dem (ungefähren) effektiven Aufwand verglichen.
 Laut Reglement der Seminararbeit (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "Stern2010"

\end_inset

) sollte der Aufwand der Seminararbeit bei mindestens 120 Stunden pro Student
 liegen.
 Diese 120 Stunden wurden auf die sechs Phasen verteilt und es wurden die
 effektiv investierten Stunden pro Phase gemessen.
\end_layout

\begin_layout Standard
Wie sich herausgestellt hat, wurde die Planung der einzelnen Phasen viel
 zu optimistisch erstellt.
 Alleine schon für das Erarbeiten des Konzepts wurde mehr als fünf Mal so
 viel Zeit gebraucht und total wurden die geplanten 120 Stunden um den Faktor
 2.8 überschritten.
 Dieser Soll/Ist-Vergleich des investierten Aufwands zeigt insbesondere
 auf, in welchen Phasen (zu) viel Zeit investiert wurde, namentlich in der
 Design- und Implementierungsphase.
 
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phase
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Geplante Stunden
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Effektive Stunden
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Themenevaluation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erfassen der Anforderungen
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erarbeiten des Konzepts
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
103
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implementierungs des Konzepts
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
153
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Überprüfen und Test des Konzepts
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Erarbeiten der Präsentation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
in Arbeit
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\lang english
\begin_inset Caption

\begin_layout Plain Layout
Gegenüberstellung geplanter/effektiver Aufwand
\begin_inset CommandInset label
LatexCommand label
name "tab:Geplanter/effektiver-Aufwand"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Schlussfolgerungen
\end_layout

\begin_layout Standard
Dieses Unterkapitel soll die Lehren aus der Semesterarbeit im Hinblick auf
 die Bachelorarbeit ziehen.
 Der wichtigste Punkt ist das Verhältnis zwischen geplantem und effektivem
 Aufwand, das in dieser Semestearbeit aus dem Ruder gelaufen ist.
 Es ist wichtig bereits zum Zeitpunkt des Erfassens der Aufgabenstellung
 eine grobe Vorstellung des Aufwands der einzelnen Punkte sowie der zu erwartend
en Resultate zu haben und bei allfällig aufgetretenen Problemen .
\end_layout

\begin_layout Standard
Es ist fragwürdig ob soviel Zeit und Aufwand in die Erklärung verschiedener
 Technologien im Kapitel Implementierung (siehe 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Verwendete-Technologien"

\end_inset

) verwendet werden soll oder 
\end_layout

\begin_layout Standard

\noun on
[Zu viel Zeit für Silverlight/HttpDualBinding verwendet, generell viel mehr
 als 120h aufgewendet, Herzblut in Seminararbeit gesteckt]
\end_layout

\begin_layout Chapter*
\start_of_appendix
Akronyme
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
API Application Programming Interface
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
GUI Graphical User Interface
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
HTTP Hypertext Transfer Protocol
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
MEF Managed Extensibility Framework
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
MSDN Microsoft Developer Network
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
MVVM Model View View Model
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
RUP Rational Unified Process
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
SL Silverlight
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
TDD Test Driven Development
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
UC Use Case
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
UI User Interface
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
WCF Windows Communication Foundation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
WPF Windows Presentation Foundation
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
WWW World Wide Web
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
YAEM Yet Another Encrypted Messenger
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
ZHAW Zürcher Hochschule für Angewandte Wissenschaften
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
XML Extensible Markup Language
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
XP Extreme Programming
\end_layout

\begin_layout Standard
\begin_inset CommandInset nomencl_print
LatexCommand printnomenclature
set_width "auto"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "YAEM"
options "plainnat"

\end_inset


\end_layout

\end_body
\end_document

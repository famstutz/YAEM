//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YAEM.TestClient.Services {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IUserService", CallbackContract=typeof(YAEM.TestClient.Services.IUserServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/Join", ReplyAction="http://tempuri.org/IUserService/JoinResponse")]
        YAEM.Domain.Session Join(YAEM.Domain.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Leave")]
        void Leave(YAEM.Domain.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsJoined", ReplyAction="http://tempuri.org/IUserService/IsJoinedResponse")]
        bool IsJoined(YAEM.Domain.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetJoinedUsers", ReplyAction="http://tempuri.org/IUserService/GetJoinedUsersResponse")]
        YAEM.Domain.User[] GetJoinedUsers();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Subscribe")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Unsubscribe")]
        void Unsubscribe();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/NotifyUserJoined")]
        void NotifyUserJoined(YAEM.Domain.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/NotifyUserLeft")]
        void NotifyUserLeft(YAEM.Domain.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/NotifyNewMessage")]
        void NotifyNewMessage(YAEM.Domain.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/NotifyNegotiateInitializationVector")]
        void NotifyNegotiateInitializationVector(byte[] initializationVector, YAEM.Domain.CryptoAlgorithm algorithm);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/NotifyNegotiateKey")]
        void NotifyNegotiateKey(byte[] key, YAEM.Domain.CryptoAlgorithm algorithm);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : YAEM.TestClient.Services.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.DuplexClientBase<YAEM.TestClient.Services.IUserService>, YAEM.TestClient.Services.IUserService {
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public YAEM.Domain.Session Join(YAEM.Domain.User user) {
            return base.Channel.Join(user);
        }
        
        public void Leave(YAEM.Domain.Session session) {
            base.Channel.Leave(session);
        }
        
        public bool IsJoined(YAEM.Domain.Session session) {
            return base.Channel.IsJoined(session);
        }
        
        public YAEM.Domain.User[] GetJoinedUsers() {
            return base.Channel.GetJoinedUsers();
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IMessagingService", CallbackContract=typeof(YAEM.TestClient.Services.IMessagingServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMessagingService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/Send")]
        void Send(YAEM.Domain.Message message, YAEM.Domain.Session sender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/NegotiateInitializationVector")]
        void NegotiateInitializationVector(byte[] initializationVector, YAEM.Domain.CryptoAlgorithm algorithm);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/NegotiateKey")]
        void NegotiateKey(byte[] key, YAEM.Domain.CryptoAlgorithm algorithm);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessagingServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/NotifyUserJoined")]
        void NotifyUserJoined(YAEM.Domain.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/NotifyUserLeft")]
        void NotifyUserLeft(YAEM.Domain.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/NotifyNewMessage")]
        void NotifyNewMessage(YAEM.Domain.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/NotifyNegotiateInitializationVector")]
        void NotifyNegotiateInitializationVector(byte[] initializationVector, YAEM.Domain.CryptoAlgorithm algorithm);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessagingService/NotifyNegotiateKey")]
        void NotifyNegotiateKey(byte[] key, YAEM.Domain.CryptoAlgorithm algorithm);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessagingServiceChannel : YAEM.TestClient.Services.IMessagingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessagingServiceClient : System.ServiceModel.DuplexClientBase<YAEM.TestClient.Services.IMessagingService>, YAEM.TestClient.Services.IMessagingService {
        
        public MessagingServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MessagingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MessagingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessagingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessagingServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Send(YAEM.Domain.Message message, YAEM.Domain.Session sender) {
            base.Channel.Send(message, sender);
        }
        
        public void NegotiateInitializationVector(byte[] initializationVector, YAEM.Domain.CryptoAlgorithm algorithm) {
            base.Channel.NegotiateInitializationVector(initializationVector, algorithm);
        }
        
        public void NegotiateKey(byte[] key, YAEM.Domain.CryptoAlgorithm algorithm) {
            base.Channel.NegotiateKey(key, algorithm);
        }
    }
}

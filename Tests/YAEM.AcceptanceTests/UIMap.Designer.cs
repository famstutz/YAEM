// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace YAEM.AcceptanceTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Join - Use 'JoinParams' to pass parameters into this method.
        /// </summary>
        public void Join()
        {
            #region Variable Declarations
            WpfEdit uINameTextBoxEdit = this.UIConnectWindow.UINameTextBoxEdit;
            WpfButton uIJoinButton = this.UIConnectWindow.UIJoinButton;
            #endregion

            // Type 'Tester' in 'NameTextBox' text box
            uINameTextBoxEdit.Text = this.JoinParams.UINameTextBoxEditText;

            // Click 'Join' button
            Mouse.Click(uIJoinButton, new Point(34, 5));
        }
        
        /// <summary>
        /// Leave
        /// </summary>
        public void Leave()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UIMessagingWindowWindow1.UIMessagingWindowTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 8));
        }
        
        /// <summary>
        /// SendMessageNoEncryption - Use 'SendMessageNoEncryptionParams' to pass parameters into this method.
        /// </summary>
        public void SendMessageNoEncryption()
        {
            #region Variable Declarations
            WpfEdit uIMessageTextBoxEdit = this.UIMessagingWindowWindow1.UIMessageTextBoxEdit;
            WpfButton uISendButton = this.UIMessagingWindowWindow1.UISendButton;
            #endregion

            // Type 'Hello World, 1, 2, 3!' in 'MessageTextBox' text box
            uIMessageTextBoxEdit.Text = this.SendMessageNoEncryptionParams.UIMessageTextBoxEditText;

            // Click 'Send' button
            Mouse.Click(uISendButton, new Point(59, 11));
        }
        
        /// <summary>
        /// RecieveMessage - Use 'RecieveMessageParams' to pass parameters into this method.
        /// </summary>
        public void RecieveMessage()
        {
            #region Variable Declarations
            WinWindow uIMessagingWindowWindow = this.UIMessagingWindowWindow;
            WpfComboBox uICryptoAlgorithmComboComboBox = this.UIMessagingWindowWindow1.UICryptoAlgorithmComboComboBox;
            WpfEdit uIMessageTextBoxEdit = this.UIMessagingWindowWindow1.UIMessageTextBoxEdit;
            WpfButton uISendButton = this.UIMessagingWindowWindow1.UISendButton;
            #endregion

            // Click 'MessagingWindow' window
            Mouse.Click(uIMessagingWindowWindow, new Point(495, 324));

            // Click 'CryptoAlgorithmComboBox' combo box
            Mouse.Click(uICryptoAlgorithmComboComboBox, new Point(78, 10));

            // Click 'CryptoAlgorithmComboBox' combo box
            Mouse.Click(uICryptoAlgorithmComboComboBox, new Point(71, 19));

            // Type 'Blabla' in 'MessageTextBox' text box
            uIMessageTextBoxEdit.Text = this.RecieveMessageParams.UIMessageTextBoxEditText;

            // Click 'Send' button
            Mouse.Click(uISendButton, new Point(142, 0));
        }
        
        #region Properties
        public virtual JoinParams JoinParams
        {
            get
            {
                if ((this.mJoinParams == null))
                {
                    this.mJoinParams = new JoinParams();
                }
                return this.mJoinParams;
            }
        }
        
        public virtual SendMessageNoEncryptionParams SendMessageNoEncryptionParams
        {
            get
            {
                if ((this.mSendMessageNoEncryptionParams == null))
                {
                    this.mSendMessageNoEncryptionParams = new SendMessageNoEncryptionParams();
                }
                return this.mSendMessageNoEncryptionParams;
            }
        }
        
        public virtual RecieveMessageParams RecieveMessageParams
        {
            get
            {
                if ((this.mRecieveMessageParams == null))
                {
                    this.mRecieveMessageParams = new RecieveMessageParams();
                }
                return this.mRecieveMessageParams;
            }
        }
        
        public UIYAEMRunningMicrosoftWindow UIYAEMRunningMicrosoftWindow
        {
            get
            {
                if ((this.mUIYAEMRunningMicrosoftWindow == null))
                {
                    this.mUIYAEMRunningMicrosoftWindow = new UIYAEMRunningMicrosoftWindow();
                }
                return this.mUIYAEMRunningMicrosoftWindow;
            }
        }
        
        public UIConnectWindow UIConnectWindow
        {
            get
            {
                if ((this.mUIConnectWindow == null))
                {
                    this.mUIConnectWindow = new UIConnectWindow();
                }
                return this.mUIConnectWindow;
            }
        }
        
        public UIMessagingWindowWindow UIMessagingWindowWindow
        {
            get
            {
                if ((this.mUIMessagingWindowWindow == null))
                {
                    this.mUIMessagingWindowWindow = new UIMessagingWindowWindow();
                }
                return this.mUIMessagingWindowWindow;
            }
        }
        
        public UIMessagingWindowWindow1 UIMessagingWindowWindow1
        {
            get
            {
                if ((this.mUIMessagingWindowWindow1 == null))
                {
                    this.mUIMessagingWindowWindow1 = new UIMessagingWindowWindow1();
                }
                return this.mUIMessagingWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private JoinParams mJoinParams;
        
        private SendMessageNoEncryptionParams mSendMessageNoEncryptionParams;
        
        private RecieveMessageParams mRecieveMessageParams;
        
        private UIYAEMRunningMicrosoftWindow mUIYAEMRunningMicrosoftWindow;
        
        private UIConnectWindow mUIConnectWindow;
        
        private UIMessagingWindowWindow mUIMessagingWindowWindow;
        
        private UIMessagingWindowWindow1 mUIMessagingWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Join'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class JoinParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Tester' in 'NameTextBox' text box
        /// </summary>
        public string UINameTextBoxEditText = "Tester";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SendMessageNoEncryption'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class SendMessageNoEncryptionParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello World, 1, 2, 3!' in 'MessageTextBox' text box
        /// </summary>
        public string UIMessageTextBoxEditText = "Hello World, 1, 2, 3!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecieveMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RecieveMessageParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Blabla' in 'MessageTextBox' text box
        /// </summary>
        public string UIMessageTextBoxEditText = "Blabla";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIYAEMRunningMicrosoftWindow : WpfWindow
    {
        
        public UIYAEMRunningMicrosoftWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "YAEM (Running) - Microsoft Visual Studio";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("YAEM (Running) - Microsoft Visual Studio");
            this.WindowTitles.Add("YAEM - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("YAEM (Running) - Microsoft Visual Studio");
            this.WindowTitles.Add("YAEM - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public UIWpfTextViewHostCustom UIWpfTextViewHostCustom
        {
            get
            {
                if ((this.mUIWpfTextViewHostCustom == null))
                {
                    this.mUIWpfTextViewHostCustom = new UIWpfTextViewHostCustom(this);
                }
                return this.mUIWpfTextViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfTextViewHostCustom mUIWpfTextViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIWpfTextViewHostCustom : WpfCustom
    {
        
        public UIWpfTextViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = null;
            this.SearchProperties["AutomationId"] = "WpfTextViewHost";
            this.WindowTitles.Add("YAEM (Running) - Microsoft Visual Studio");
            this.WindowTitles.Add("YAEM - Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITextEditorEdit
        {
            get
            {
                if ((this.mUITextEditorEdit == null))
                {
                    this.mUITextEditorEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextEditorEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "WpfTextView";
                    this.mUITextEditorEdit.WindowTitles.Add("YAEM (Running) - Microsoft Visual Studio");
                    this.mUITextEditorEdit.WindowTitles.Add("YAEM - Microsoft Visual Studio");
                    #endregion
                }
                return this.mUITextEditorEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITextEditorEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIConnectWindow : WpfWindow
    {
        
        public UIConnectWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Connect...";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Connect...");
            #endregion
        }
        
        #region Properties
        public WpfEdit UINameTextBoxEdit
        {
            get
            {
                if ((this.mUINameTextBoxEdit == null))
                {
                    this.mUINameTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUINameTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "NameTextBox";
                    this.mUINameTextBoxEdit.WindowTitles.Add("Connect...");
                    #endregion
                }
                return this.mUINameTextBoxEdit;
            }
        }
        
        public WpfButton UIJoinButton
        {
            get
            {
                if ((this.mUIJoinButton == null))
                {
                    this.mUIJoinButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIJoinButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "JoinButton";
                    this.mUIJoinButton.WindowTitles.Add("Connect...");
                    #endregion
                }
                return this.mUIJoinButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUINameTextBoxEdit;
        
        private WpfButton mUIJoinButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMessagingWindowWindow : WinWindow
    {
        
        public UIMessagingWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MessagingWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MessagingWindow");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMessagingWindowWindow1 : WpfWindow
    {
        
        public UIMessagingWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MessagingWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MessagingWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIMessageTextBoxEdit
        {
            get
            {
                if ((this.mUIMessageTextBoxEdit == null))
                {
                    this.mUIMessageTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIMessageTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "MessageTextBox";
                    this.mUIMessageTextBoxEdit.WindowTitles.Add("MessagingWindow");
                    #endregion
                }
                return this.mUIMessageTextBoxEdit;
            }
        }
        
        public WpfButton UISendButton
        {
            get
            {
                if ((this.mUISendButton == null))
                {
                    this.mUISendButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISendButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "SendButton";
                    this.mUISendButton.WindowTitles.Add("MessagingWindow");
                    #endregion
                }
                return this.mUISendButton;
            }
        }
        
        public UIMessagingWindowTitleBar UIMessagingWindowTitleBar
        {
            get
            {
                if ((this.mUIMessagingWindowTitleBar == null))
                {
                    this.mUIMessagingWindowTitleBar = new UIMessagingWindowTitleBar(this);
                }
                return this.mUIMessagingWindowTitleBar;
            }
        }
        
        public WpfComboBox UICryptoAlgorithmComboComboBox
        {
            get
            {
                if ((this.mUICryptoAlgorithmComboComboBox == null))
                {
                    this.mUICryptoAlgorithmComboComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUICryptoAlgorithmComboComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "CryptoAlgorithmComboBox";
                    this.mUICryptoAlgorithmComboComboBox.WindowTitles.Add("MessagingWindow");
                    #endregion
                }
                return this.mUICryptoAlgorithmComboComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIMessageTextBoxEdit;
        
        private WpfButton mUISendButton;
        
        private UIMessagingWindowTitleBar mUIMessagingWindowTitleBar;
        
        private WpfComboBox mUICryptoAlgorithmComboComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIMessagingWindowTitleBar : WpfTitleBar
    {
        
        public UIMessagingWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("MessagingWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MessagingWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
}
